axiom seq : forall (x: set, y: set. ((? eq x y) iff (forall (z: int. ((? mem z x) iff (? mem z y))))))
axiom emp : forall (x: int. -. (? mem x empty))
axiom cup : forall (x: int, y: set, z: set. (? mem x (cup y z) iff (? mem x y or ? mem x z)))

val cap: x: set -> y: set -> {v: set | v = cap x y}
val cup: x: set -> y: set -> {v: set | v = cup x y}
val mem: x: int -> y: set -> {v: bool | v = mem x y}
val singleton: x: int -> {v: set | v = singleton x}
val empty: set
val eq: x: set -> y: set -> {v: bool | v = eq x y}
