axiom pos: forall (x: int. (sz x) >= 0)
measure sz =
  | Empty -> 0
  | Same (x, l, r) -> 1 + sz l + sz r
  | Diff (x, l, r) -> 1 + sz l + sz r
measure max =
  | Same (x, _, _) -> x
  | Diff (x, _, _) -> x
val empty: [[], [v: true, v: true, v: true], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z, {e2: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z | ((sz e1) = (sz e2))} || e0: 'a, e1: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z, {e2: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z | ((sz e1) = (sz e2) + 1)}]
val add: x: 'a -> h: [[], [v: true, v: true, v: true], [v: true, v: true, v: true]] [z: t . || {e0: 'a | e0 != x}, e1: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z, {e2: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z | ((sz e1) = (sz e2))} || {e0: 'a | e0 != x}, e1: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z, {e2: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z | ((sz e1) = (sz e2) + 1)}] -> {v: [[], [v: true, v: true, v: true], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z, {e2: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z | ((sz e1) = (sz e2))} || e0: 'a, e1: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z, {e2: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z | ((sz e1) = (sz e2) + 1)}] | (sz v) = (sz h) + 1}
val maximum: h: {v: [[], [v: true, v: true, v: true], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z, {e2: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z | ((sz e1) = (sz e2))} || e0: 'a, e1: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z, {e2: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z | ((sz e1) = (sz e2) + 1)}] | (sz v) > 0} -> 'a * {v: [[], [v: true, v: true, v: true], [v: true, v: true, v: true]] [z: t . || d: 'a, e1: [[], [v: v < d and v < e0, v: true, v: true], [v: v < d and v < e0, v: true, v: true]] z, {e2: [[], [v: v < d and v < e0, v: true, v: true], [v: v < d and v < e0, v: true, v: true]] z | ((sz e1) = (sz e2))} || d: 'a, e1: [[], [v: v < d and v < e0, v: true, v: true], [v: v < d and v < e0, v: true, v: true]] z, {e2: [[], [v: v < d and v < e0, v: true, v: true], [v: v < d and v < e0, v: true, v: true]] z | ((sz e1) = (sz e2) + 1)}] | e0 = (max v) and h = v}
val extract_last: h: {v: [[], [v: true, v: true, v: true], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z, {e2: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z | ((sz e1) = (sz e2))} || e0: 'a, e1: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z, {e2: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z | ((sz e1) = (sz e2) + 1)}] | (sz v) > 0} -> 'a * {v: [[], [v: true, v: true, v: true], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z, {e2: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z | ((sz e1) = (sz e2))} || e0: 'a, e1: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z, {e2: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z | ((sz e1) = (sz e2) + 1)}] | (sz v) = (sz h) - 1}
val descent: x: 'a -> h: {v: [[], [v: true, v: true, v: true], [v: true, v: true, v: true]] [z: t . || {e0: 'a | e0 != x}, e1: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z, {e2: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z | ((sz e1) = (sz e2))} || {e0: 'a | e0 != x}, e1: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z, {e2: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z | ((sz e1) = (sz e2) + 1)}] | (sz v) > 0} -> {v: 'a | v = (max h)} * {v: [[], [v: true, v: true, v: true], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z, {e2: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z | ((sz e1) = (sz e2))} || e0: 'a, e1: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z, {e2: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z | ((sz e1) = (sz e2) + 1)}] | ((sz v) = (sz h))}
(*val remove: h: [[], [v: true, v: true, v: true], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z, {e2: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z | ((sz e1) = (sz e2))} || e0: 'a, e1: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z, {e2: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z | ((sz e1) = (sz e2) + 1)}] -> [[], [v: true, v: true, v: true], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z, {e2: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z | ((sz e1) = (sz e2))} || e0: 'a, e1: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z, {e2: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z | ((sz e1) = (sz e2) + 1)}]
val iter: f: ('a -> 'b) -> h: [[], [v: true, v: true, v: true], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z, {e2: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z | ((sz e1) = (sz e2))} || e0: 'a, e1: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z, {e2: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z | ((sz e1) = (sz e2) + 1)}] -> unit
val fold: f: ('a -> 'b -> 'b) -> h: [[], [v: true, v: true, v: true], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z, {e2: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z | ((sz e1) = (sz e2))} || e0: 'a, e1: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z, {e2: [[], [v: v < e0, v: true, v: true], [v: v < e0, v: true, v: true]] z | ((sz e1) = (sz e2) + 1)}] -> b: 'b -> 'b*)
