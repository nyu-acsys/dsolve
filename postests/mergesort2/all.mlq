measure len =
    [] -> 0
  | x :: xs -> 1 + len xs
 
measure llen = 
    Nil -> 0
  | Cons(xs, xss) -> len xs + llen xss
  

measure set_of =
    Nil -> Myset.empty
  | Cons(xs, xss') -> Myset.cup (Myset.of_list xs) (set_of xss')

val mergesort2:
  xs: [(b: 'a) list . || e0: 'b, e1: 'b list] ->
  {v : [(b: 'a) list . || e0: 'b, e1: [[], [v: e0 <= v, v: true]] 'b list] | len v = len xs && (? Myset.eq (Myset.of_list v) (Myset.of_list xs))}
  
