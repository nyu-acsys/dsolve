(* to use:
   ocamlc tests/myset.mli
   ./dsolve.py -I tests tests/mysetblah.ml
*)

axiom seq : forall (x: set, y: set. ((? eq x y) iff (forall (z: int. ((? mem z x) iff (? mem z y))))))
axiom emp : forall (x: int. -. (? mem x empty))
axiom cup : forall (x: int, y: set, z: set. (? mem x (cup y z) iff (? mem x y or ? mem x z)))
axiom cap : forall (x: int, y: set, z: set. (? mem x (cap y z) iff (? mem x y and ? mem x z)))

(* axiom mns : forall (x: int, x: set, y: set. (? mem x (mns y z) iff (? mem x y and (not (? mem x z)))) *)

axiom sng : forall (x: int, y: int. (? mem x (sng y) iff x = y))
axiom eeq : forall (x: set, y: set. ((x = y) iff (forall (z: int. ((? mem z x) iff (? mem z y))))))

measure of_list =
  | [] -> empty
  | x :: xs -> cup (sng x) (of_list xs)

val empty: set
val mem: x: 'a -> y: set -> {v: bool | v = mem x y}
val eq: x: set -> y: set -> {v: bool | v = eq x y}
val of_list: x: 'a list -> {v: set | v = of_list x}
val cap: x: set -> y: set -> {v: set | v = cap x y}
val cup: x: set -> y: set -> {v: set | v = cup x y}
val sng: x: 'a -> {v: set | v = sng x}
val mns: x: set -> y: set -> {v: set | v = mns x y}
