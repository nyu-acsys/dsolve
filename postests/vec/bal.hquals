qualif FALSE(v) : 1 = 0

(* from the mlq *)

qualif HG0(v) : height v { >, >= } 0
qualif V(v)(A: int) : v { * * } ~A
qualif H(_v)(A: 'a t): height _v { * * } height ~A

qualif ISEMPTY(v) : v = (height t = 0 ? 1 : 0)

qualif Ph(v): v = (height [l, e0] >= height [r, e3] ? height [l, e0] : height [r, e3]) + 1

qualif BAL(v):
   height v { >=, <= } (height l >= height r ? height l : height r) {< +, - >} [1, 2]

qualif H(_v)(A: 'a t): _v = height ~A 


(* not from the mlq *)

qualif BAL(v): height v { <=, >= } height ~A {< -, + >} [1, 2, 3]
qualif BAL(v):
   height v >= (height l <= height r + 2 && height l >= height r - 2 ? (height l >= height r ? height l : height r) + 1 : 0)
qualif BAL(v):
   height v >= (height l >= height r ? height l : height r) + (height l <= height r + 2 && height l >= height r - 2 ? 1 : [0, -1])
qualif JOIN(v): height v {>=, <=} (height [l, t1] >= height [r, t2] ? height [l, t1] : height [r, t2]) {< -, + >} [0, 1]


(* for fold/iter etc *)
