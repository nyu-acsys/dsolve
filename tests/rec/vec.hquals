qualif FALSE(v) : 1 = 0
qualif G0(v) : v {=, >, >= } 0
qualif V(v) : v { * * } ~A

(*
qualif Ph(v): v = (height e0 >= height e3 ? height e0 : height e3) + 1
qualif Ph(v): v = (height l >= height r ? height l : height r) + 1
qualif M(v) : v = height ~A
qualif HG0(v) : height v { >, >= } 0
qualif BAL(v)(*A: 'a t*): v { <=, >= } height ~A {< -, + >} [1, 2, 3, 4]
qualif BAL(v)   : v { <=, >= } height e0 {< -, + >} [1, 2, 3, 4]
qualif BAL(v)(*A: 'a t*)   : height v { <=, >= } height ~A {< -, + >} [1, 2, 3, 4]
(* typing the qualifier seems to cull too much. this is a bug *)
qualif BAL(v)   : height v { <=, >= } height e0 {< -, + >} [1, 2, 3, 4]
qualif BALINVAR(v):
   height v { >=, <= } (height l >= height r ? height l : height r) {< +, - >} [1, 2]
qualif BALINVAR(v):
   height v >= (height l <= height r + 2 and height l >= height r - 2 ? (height l >= height r ? height l : height r) + 1 : 0)
qualif BALINVAR(v):
   height v >= (height l >= height r ? height l : height r) + (height l <= height r + 2 and height l >= height r - 2 ? 1 : 0)
qualif BALINVAR(v):
   height v >= (height l >= height r ? height l : height r) + (height l <= height r + 2 and height l >= height r - 2 ? 1 : 0-1)
qualif Phh(v)   : height v {=, <=} (height [l, ll, lrl, rll] >= height [r, lr, lrr, rlr] ? height [l, ll, lrl, rll] : height [r, lr, lrr, rlr]) + 1 
qualif Phh(v)   : height v {=, >=} (height [l, ll, lrl, rll] >= height [r, lr, lrr, rlr] ? height [l, ll, lrl, rll] : height [r, lr, lrr, rlr])
qualif PhhHH(v)   : height v {>=, <=} (height t1 >= height t2 ? height t1 : height t2)
qualif PhhHH(v)   : height v {>=, <=} (height t1 >= height t2 ? height t1 {< -, + >} 1 : height t2 {< -, + >} 1)
qualif H(_v)(A: 'a t): height _v { * * } height ~A
qualif H(v)     : height v { * * } height e0
*)

(* iteri///
qualif ITERI(v) : v <= length t - length t'
qualif ITERI(v) : v + k = [i, j]
*)

qualif SUB(v) : length v = j - i
qualif ISEMPTY(v) : v = (height t = 0 or length t = 0 ? 1 : 0)
qualif LVAR(_v) : length _v { * * } ~A 
qualif LVARV(v) : v { * * } length ~A
qualif LVARVV(v) : length v { * * } length ~A
qualif LCONST(v) : length v { * * } [0, 1]
qualif LPLUSONE(v) : length v { * * } length t {< -, + >} 1
qualif LLL(_v) : length _v = (length v > i ? length v : i + 1)
qualif LLL(v) : length v = [n, i] {< +, - >} 1
qualif LSUM(v) : length v = [0, 1] + length [t1, l] + length [t2, r]
qualif E1(v): v = length e0
qualif E4(v): v = length e3

