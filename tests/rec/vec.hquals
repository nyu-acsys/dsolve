qualif FALSE(v) : 1 = 0
qualif V(v)(A: int) : v { * * } ~A


qualif Ph(v): v = (height [l, e0] >= height [r, e3] ? height [l, e0] : height [r, e3]) + 1
qualif HG0(v) : height v { >, >= } 0


qualif BAL(v): height v { <=, >= } height ~A {< -, + >} [1, 2, 3]

qualif BAL(v):
   height v { >=, <= } (height l >= height r ? height l : height r) {< +, - >} [1, 2]
qualif BAL(v):
   height v >= (height l <= height r + 2 and height l >= height r - 2 ? (height l >= height r ? height l : height r) + 1 : 0)
qualif BAL(v):
   height v >= (height l >= height r ? height l : height r) + (height l <= height r + 2 and height l >= height r - 2 ? 1 : [0, -1])

qualif JOIN(v): height v {>=, <=} (height [l, t1] >= height [r, t2] ? height [l, t1] : height [r, t2]) {< -, + >} [0, 1]


qualif H(_v)(A: 'a t): _v = height ~A 
qualif H(_v)(A: 'a t): height _v { * * } height ~A


(* for fold/iter etc *)
qualif ITERI(v) : v <= length t - length t'
qualif ITERI(v) : v + k = [i, j]
qualif MAPI(v) : ~A <= length t - length v

qualif LVAR(_v)(A: int) : length _v { * * } ~A 
qualif LVARV(v) : v { * * } length ~A
qualif LVARVV(v)(A: 'a t) : length v { * * } length ~A


qualif SUB(v) : length v = j - i
qualif TOARR(v) : length t = Array.length v

qualif LCONST(v) : length v { * * } [0, 1]

qualif SETAPPEND(v) : length v = n {< +, - >} 1

qualif LPLUSONE(v) : length v { * * } length t {< -, + >} 1

qualif LSUM(v) : length v = [0, 1] + length [t1, l] + length [t2, r]

qualif SETAPPEND(_v) : length _v = (length v > i ? length v : i + 1)
qualif ISEMPTY(v) : v = (height t = 0 or length t = 0 ? 1 : 0)
