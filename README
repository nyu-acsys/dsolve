Compiling the multi-prover distribution under cygwin
=============================

1. Download and install camlidl 1.05
2. Download and install GMP from source
3. Uninstall swig via cygwin setup
4. Download and install swig 1.3.33+ from source
5. ./configure
6. make libs
7. make
8. make install

Compiling dsolve under Cygwin w/ MSVC toolchain
=============================

1. Build Z3
2. cp Z3-.../ocaml/* to external/z3
3. cp z3.dll to dsolve/
4. change theoremProver.ml --> module Prover = TheoremproverZ3.Prover
5. cmd /k vsvars32.bat
6. ./configure && make -f Makefile.win libs && make -f Makefile.win 

make etc.

Compiling dsolve
================

dsolve requires OCaml 3.10+, SWIG, and the GNU Multiprecision Library.

To compile dsolve:

1. Download yices from http://yices.csl.sri.com/download.shtml
   (NOTE: Be sure to download the version with GMP dynamically linked!)

2. In the top-level dsolve directory, untar yices with:

     tar zxvf [path to yices tar] --strip-components 1 -C external/yices

3. Run ./configure && make libs && make

NOTE: Be sure that the files in external/yices/lib are in your library
      path!  One way to do this is to run

        export LD_LIBRARY_PATH=[path to dsolve]/external/yices/lib:$LD_LIBRARY_PATH

4. (Optional) Run the regression test suite via

     make tests


Running dsolve
==============

To typecheck your program with dsolve, run

  ./dsolve.py [ML source file]

Example programs are included in tests/.
The inferred types are output in a .annot file.
For example,

  ./dsolve.py foo.ml

will produce the annotation file foo.annot

Sometimes the types have predicates like "(= V (+ __tmp0 1))".  This is due to
A-normalization.  To get around this, you can run without A-normalization:

  ./dsolve.py -no-anormal [ML source file]

Many programs will not typecheck without A-normalization, so it is on
by default.

For more options, run:

  ./dsolve.py -help


Defining Qualifiers
===================

Qualifiers are specified as patterns which match program identifiers,
literals, types, and operators.

When dsolve is invoked on a file path_to/foo.ml, it uses the
qualifiers specified in the file

  ./default_patterns

dsolve also uses the qualifiers specified in the file

  path_to/foo.hquals

if it exists.  Example hquals files can be found in examples/.

Syntax
------

Qualifiers can include the following constructs:

* Integer Literals, Identifiers, and Operators *
qualif IsXPlus3(v): v >= x + 3

* Condition expression (ifthenelse) *
qualif Max(v): v = if (x > y) then (x) else (y)
qualif Max(v): v = (x > y ? x : y)

* Sets of Integer Literals *
qualif A(v): v = [0,1,2]

* Sets of Identifiers *
qualif A(v) : v = [a, b, c]

* ^ - Integer Literal Wildcard *
qualif PlusSomething(v): a = b + ^

* Sets of Arithmetic Operators *
qualif A(v) : v {< +, - >} 5 > 0

* Sets of Relational Operators *
qualif A(v): v { <, <= } 5

* (* *) - Operator Wildcard *
qualif A(v): v { * * } 5
qualif A(v) : v {< * * >} 5 > 0 (possibly)

* Metavariables With Optional Type Annotations *
qualif A(v) : ~A + v = ^
qualif C(v)(A:int, B:int^) : ~A + v + ~B = ^

  Annotated types are matched to program types by unification.

  The type grammar can't handle ADTs or records.  However, you can
  define these as user types in the program source and then reference
  the type name in the pattern.


Defining Liquid Interfaces 
==========================

When running

  ./dsolve.py path_to/foo.ml

dsolve will attempt to use the interface file

  path_to/foo.mlq

if it exists.

This Liquid interface file can be used to specify the Liquid types of
program values as well as specify measure functions which can be
used to prove structural properties of sum types. Example Liquid 
interfaces can be found in examples/.


Interface Syntax
------

A Liquid interface consists of two lists, the first specifying
predicate abbreviations to be used in type definitions, the second
mapping values to Liquid types.


* Predicate Aliases *

First, there is a list of predicate aliases, used as abbreviations in
type specifications.  Example:

pred P = (v) v > 0

Note: predicate aliases cannot reference other predicate aliases.


* Value to Liquid Type Mappings *

Second, there is a list of value, type pairs.  Examples:

val program_ident : {v: int | v > 0 }

The type on the right hand side of the colon can take on several forms:

int == {int | true}

{v: int array | Array.length v > 0} == {v: {int | true} array | Array.length v > 0)

{int | P} == {v: int | v > 0}


Records are specified as follows:

{v: { lbl : int } | v.lbl = 0} == {v: { lbl : {int | true} | v.lbl = 0}

Tuples work similarly.

ADTs can be specified as follows:

{v: [[], [v: v > 0, v: true]] [t: list . || {e0: int | e0 > 10},
                                            e1: [[], [v: v > 1, v: true]] t] | len v = 2}

Note that || separates type constructors, and the first constructor,
[], has no parameters.

Measure Syntax
--------------

A measure is a function from a sum type to the integers which specifies some useful
structural property of that type. Measures can be recursive (allowing inductive reasoning),
but must be expressed in EUFA. Measures are defined in two parts:

1) A measure definition in the liquid interface file.

measure length =
| [] -> 0
| _ :: b -> 1 + length b

Note that the set of identifiers in the pattern of each match case should be exactly the
set of identifiers needed to express the measure value for that constructor.

2) A matching function in the ml source code.

let length l =
  match l with
  | [] -> 0
  | _ :: b -> 1 + length b

Error Messages
--------------

Liquid interface files which contain identifiers not found in the
program will fail with an explicit error.

If the Liquid interface file and the ML typechecker disagree about the
ML type of an identifier, dsolve will fail with a somewhat cryptic
error*.  For example, if the Liquid interface specifies a (bool, int)
value but the actual type of the value is int, the error produced is

  Unsupported types for instantiation: {({bool | true}, {int | true}) | true}
    {int | k_1191}
  Fatal error: exception Assert_failure("qualifying/frame.ml", 168, 5)

* Other cryptic errors may also apply.

If your type annotation causes the program to not typecheck, 
the error message will have an inexplicable location.  Example:

  File "DML/bsearch.mlq", line 1, characters 0-1:
  {int | (V = __atmp30)} is not a subtype of {int | (v >= 0)}



