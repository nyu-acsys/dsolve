measure len =
    [] -> 0
  | x :: xs -> 1 + len xs
 
measure llen = 
    Nil -> 0
  | Cons(xs, xss) -> len xs + llen xss
  

measure set_of =
    Nil -> Myset.empty
  | Cons(xs, xss') -> Myset.cup (Myset.of_list xs) (set_of xss')

val mergesort2: xs:
  [[], [v: true, v: true]] [t: list . || e0: 'a, e1: [[], [v: true, v: true]] t] ->
  {v : [[], [v: true, v: true]] [t: list . || e0: 'a, e1: [[], [v: e0 <= v, v: true]] t] | len v = len xs and (? Myset.eq (Myset.of_list v) (Myset.of_list xs))}
  
