measure var =
  | Zero _ -> 1000
  | One _ -> 1000
  | Node (_,v,_,_) -> v
(*
  val mk : x: {v: int | (0 <= v) && (v < 1000)} -> {v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (x < var v) } -> {v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (x < var v) } -> {v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (x <= var v) }
  val mk_var: x: {v: int | (0 <= v) && (v < 1000)} -> {v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (true) }
  val mk_not: x: {v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (true) } -> {v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (var x <= var v) }
  val gapply: operator -> x:{v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (true) } -> y:{v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (true) } -> {v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && ((var x <= var v) || (var y <= var v)) }
*)
val mk_not: {v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (true) } -> {v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (true) }
val mk_and: {v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (true) } -> {v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (true) } -> {v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (true) }
val mk_or : {v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (true) } -> {v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (true) } -> {v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (true) }
val mk_imp: {v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (true) } -> {v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (true) } -> {v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (true) }
val mk_iff: {v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (true) } -> {v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (true) } -> {v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (true) }
val apply : (bool -> bool -> bool) -> {v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (true) } -> {v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (true) } -> {v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (true) }
val build : formula -> {v:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] [z: bdd. e0: int || e0:int || e0: int, {e1: int | (0 <= e1) && (e1 < 1000)}, {e2:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e2) && (var e2 <= 1000)}, {e3:[[v:true],[v:true],[v:true,v:true,v:true,v:true]] z | (e1 < var e3) && (var e3 <= 1000)}] | (0 <= var v && var v <= 1000) && (true) }
