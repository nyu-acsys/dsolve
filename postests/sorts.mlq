 
measure set_of =
    Nil -> Myset.empty
  | Cons(xs, xss') -> Myset.cup (Myset.of_list xs) (set_of xss')

val mergesort2:
  xs: [(b: 'a) list . || e0: 'b, e1: 'b list] ->
  {v : [(b: 'a) list . || e0: 'b, e1: [[], [v: e0 <= v, v: true]] 'b list] | (? Myset.eq (Myset.of_list v) (Myset.of_list xs))}

val quick_sort:
  xs: [(b: 'a) list . || e0: 'b, e1: 'b list] ->
  {v : [(b: 'a) list . || e0: 'b, e1: [[], [v: e0 <= v, v: true]] 'b list] | (? Myset.eq (Myset.of_list v) (Myset.of_list xs))}

val merge_sort:
  xs: [(b: 'a) list . || e0: 'b, e1: 'b list] ->
  {v : [(b: 'a) list . || e0: 'b, e1: [[], [v: e0 <= v, v: true]] 'b list] | (? Myset.eq (Myset.of_list v) (Myset.of_list xs))}

val insert_sort:
  xs: [(b: 'a) list . || e0: 'b, e1: 'b list] ->
  {v : [(b: 'a) list . || e0: 'b, e1: [[], [v: e0 <= v, v: true]] 'b list] | (? Myset.eq (Myset.of_list v) (Myset.of_list xs))}

