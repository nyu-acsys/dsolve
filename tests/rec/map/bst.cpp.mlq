#define RHO(p) [[], [v: p, v: true, v: true, v: true, v: true]]
#define T RHO(true)
#define LT e2: RHO(v < e0) z
#define RT e3: RHO(v > e0) z
#define TREE T [z: t . || e0: 'a, e1: int, LT, RT, e4: int]

val add: 'a -> int -> TREE -> TREE
(*
val remove_min_binding: t: TREE -> 'a * int * RGDTREE(v, true)

val merge: m: 'a -> t1: RGDTREE(v, RHO(v < m), true) -> t2: RGDTREE(v, RHO(v > m), BALW(t1, v, 2)) ->
  RTGDTREE(v, H(v) <= MAX(H(t1), H(t2)) + 1 and H(v) >= MAX(H(t1), H(t2)))
*)
val remove: 'a -> t: TREE -> TREE
