#!/bin/bash
#not actually a regression test
OCAML=./ocaml.run
FLAGS="-dframes -anormal -cacheq "
QUALFLAGS="-dqualifs -lqualifs"
YFILE=yicestests
SFILE=simtests
POSFILE=posfiles
NEGFILE=negtests
#HANDQUALS_ONLY="yep"

if [[ $1 == "" ]]
then
  TMPDIR=/tmp
else
  TMPDIR=$1
fi

rm -f $TMPDIR/*.lilog*
rm -f DML/*.quals
rm -f DMLex/*.quals

FILE=`cat $POSFILE`" "$NEGFILE

echo Generating qualifiers where needed...

if [[ $HANDQUALS_ONLY ]]
then
  echo "User specified hand quals only"
else
        for i in `cat $FILE`
  do
    cat $i.quals 1> /dev/null 2> /dev/null
    if [[ $? != 0 ]]
    then
      $OCAML $QUALFLAGS $i 1> /dev/null 2> $i.quals
    fi
  done
fi
echo done.

for j in `cat $POSFILE`
do
echo RUNNING $j TESTS
for i in `cat $j`
do
  YICES=""
  if [[ "$j" == "yicestests" ]]
  then
      YICES="-bprover"
  fi

  echo RUNNING: $i 
  LOGFILE=$TMPDIR"/"${i/\//_}".lilog"
  echo $i > $LOGFILE
  time $OCAML $FLAGS $YICES $i 1>> $LOGFILE 2>> $LOGFILE

  SUCC=$?

  #some stupid grep tricks to cut down on the output
  s=`grep -n "\#\#solve\#\#" $LOGFILE | tail -n1 -` 
  d=`grep -n "\#\#endtime\#\#" $LOGFILE | tail -n1 -`
  s=`expr "$s" : '\([0-9]*\)'`
  d=`expr "$d" : '\([0-9]*\)'`
  let "s = $d - $s - 1"
  let "d = $d - 1"
  f=`head -n$d $LOGFILE | tail -n$s -`
  echo $i > $LOGFILE.min
  echo "$f" >> $LOGFILE.min
  echo "

  " >> $LOGFILE.min

  
  if [ $SUCC = 0 ] 
  then 
    echo "SUCCESS!"
  else
    echo "FAILURE :("
  fi
  echo -n "Time in solver:  " 
  t=`grep "TOTAL" $LOGFILE | tail -n1`
  t=`echo "${t//TOTAL/}" | tr -ds " " " "`
  tt=`grep "cache" $LOGFILE | tail -n1 | tr -s " " " "`
  ttt=`grep "matching" $LOGFILE | tail -n1 | tr -s " " " "`
  echo "$t"
  echo "$tt"
  echo "$ttt"
done
done
echo DONE


#echo RUNNING NEGFILE
#for i in `cat $NEGFILE`
#do
#  echo RUNNING: $i 
#  time $OCAML $FLAGS $i &> $TMPDIR"/"${i/\//_}".lilog"
#  if [ $? = 1 ] 
#  then 
#    echo "SUCCESS!"
#  else
#    echo "FAILURE :("
#  fi
#  grep "TOTAL" $LOGFILE | tail -n1
#done
#echo DONE

exit 0

OUT_FILES=`ls $TMPDIR"/"*.lilog`

#grovel through output files for stats below:


echo "Timing: "
for i in $OUT_FILES
do
   s=`grep -n "\#\#solve\#\#" $i | tail -n1 -` 
   d=`grep -n "\#\#endtime\#\#" $i | tail -n1 -`
   s=`expr "$s" : '\([0-9]*\)'`
   d=`expr "$d" : '\([0-9]*\)'`
   let "s = $d - $s"
   f=`head -n$d $i | tail -n$s -`
   tot=`
done
