axiom pos: forall (x: int. (sz x) >= 0)
measure sz =
  | E -> 0
  | T (_, l, r) -> 1 + sz l + sz r
measure set_of =
  | E -> Myset.empty
  | T (x, l, r) -> (Myset.cup (Myset.sng x) (Myset.cup (set_of l) (set_of r)))
(*val empty : [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t]
val isEmpty : [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t] -> bool
val insert : 'a -> [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t] -> [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t]
val merge : [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t] -> [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t] -> [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t]
val findMin2 : [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t] -> ('a * [[], [v: e0 <= v, v: true, v: true]] [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t])
val deleteMin : [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t] -> [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t]
val deleteMin2: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t] -> ('a * [[], [v: e0 <= v, v: true, v: true]] [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t])
val to_list2 : [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t] -> 'a list*)
val empty : {v: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t] | (sz v) = 0 && (set_of v) = Myset.empty}
val isEmpty : t: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t] -> {v: bool | (*? v -> (sz t) = 0*) true }
val insert : x: 'a -> t: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t] -> {v: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t] | (sz v) = (sz t) + 1 && (? Myset.eq (set_of v) (Myset.cup (set_of t) (Myset.sng x)))}
val merge : h: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t] -> t: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t] -> {v: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t] | (sz v) = (sz h) + (sz t) && (? Myset.eq (set_of v) (Myset.cup (set_of t) (set_of h)))}
val findMin2 : t: {v: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t] | (sz v) > 0} -> ('a * {v: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t] | v = t})
val deleteMin : t: {v: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t] | (sz v) > 0} -> {v: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t] | (sz v) = (sz t) - 1}
val deleteMin2: t: {v: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t] | (sz v) > 0} -> ('a * {v: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t] | (sz v) = (sz t) - 1 && (? Myset.eq (set_of t) (Myset.cup (set_of v) (Myset.sng e0)))})
val to_list2 : [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true]] 'b t, e2: [[], [v: v >= e0, v: true, v: true]] 'b t] -> 'a list
