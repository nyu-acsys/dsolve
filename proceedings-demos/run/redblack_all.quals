mdep Pervasives
const_ints 0, 1, 2, 3
(*Program Identifiers: a, b, dict, key, x, y*)
qualif MLQ(_V) : (((color _V) <= 1) or  ((color e1) <= 1))
qualif MLQ(_V) : (((color _V) = 2) or  ((color e1) = 2))
qualif MLQ(_V) : (((x >= 0) and  (y >= 0)) -> ((_V >= 0) and  ((_V <= x) and  (_V <= y))))
qualif MLQ(_V) : (((x >= 0) and  (y >= 0)) -> (_V >= 0))
qualif MLQ(_V) : ((? (_V)) iff ((? (x)) and  (? (y))))
qualif MLQ(_V) : ((? (_V)) iff ((? (x)) or  (? (y))))
qualif MLQ(_V) : ((? (_V)) iff (-. (? (x))))
qualif MLQ(_V) : ((? (_V)) iff (x != y))
qualif MLQ(_V) : ((? (_V)) iff (x < y))
qualif MLQ(_V) : ((? (_V)) iff (x <= y))
qualif MLQ(_V) : ((? (_V)) iff (x = y))
qualif MLQ(_V) : ((? (_V)) iff (x > y))
qualif MLQ(_V) : ((? (_V)) iff (x >= y))
qualif MLQ(_V) : ((color _V) <= 1)
qualif MLQ(_V) : ((color _V) <= 2)
qualif Measure(_V) : ((color _V) = 0)
qualif Measure(_V) : ((color _V) = 1)
qualif Measure(_V) : ((color _V) = 2)
qualif Measure(_V) : ((color _V) = 3)
qualif Measure(_V) : ((height _V) =
(if (((height l) > (height r))) then ((height l)) else ((height r)) + 1))
qualif Measure(_V) : ((height _V) =
if (((height l) > (height r))) then ((height l)) else ((height r)))
qualif MLQ(_V) : ((height _V) = (height e1))
qualif Measure(_V) : ((height _V) = 0)
qualif MLQ(_V) : ((x >= 0) -> (_V >= 0))
qualif MLQ(_V) : ((y > 0) -> (_V < y))
qualif MLQ(_V) : (0 <= _V)
qualif FALSE(_V) : (1 = 0)
qualif MLQ(_V) : (_V != 0)
qualif MLQ(_V) : (_V < e0)
qualif Measure(_V) : (_V = (color a))
qualif Measure(_V) : (_V = (color b))
qualif Measure(_V) : (_V = (color dict))
qualif Measure(_V) : (_V = (color key))
qualif Measure(_V) : (_V = (color x))
qualif Measure(_V) : (_V = (color y))
qualif Measure(_V) : (_V = (height a))
qualif Measure(_V) : (_V = (height b))
qualif Measure(_V) : (_V = (height dict))
qualif Measure(_V) : (_V = (height key))
qualif Measure(_V) : (_V = (height x))
qualif Measure(_V) : (_V = (height y))
qualif MLQ(_V) : (_V = (x * y))
qualif MLQ(_V) : (_V = (x + 1))
qualif MLQ(_V) : (_V = (x + y))
qualif MLQ(_V) : (_V = (x - (y * (x / y))))
qualif MLQ(_V) : (_V = (x - 1))
qualif MLQ(_V) : (_V = (x - y))
qualif MLQ(_V) : (_V = (x / y))
qualif MLQ(_V) : (_V > e0)
qualif MLQ(_V) : (_V >= 0)
(* Color quals *)
qualif WHENPURPLE(v):     (color v <= 2) or (color ~A = 2)

(* the following count as one - consider that we had an xor operator *)
qualif MAYBERED(v):       color v <= 1 or color e1 <= 1
qualif MAYBERED(v):       color v = 2 or color e1 = 2

(* Balance quals *)
qualif INC(v): height v = 1 + height ~A

(** From the MLQ **)

(* balance quals *)
qualif EQH(v): height v = height ~A

(* BST quals *)
qualif COMP(v)  : ~A { >, < } v

(* Color quals *)
qualif COLOR(v):          color v = [0, 1, 2, 3]
qualif COLORNOTPURPLE(v): color v <= [0, 1, 2]

