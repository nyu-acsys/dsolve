#define TRUEREF [[], [v: true, v: true, v: true, v: true, v: true, v: true]]
#define R(name, rec, ref) {name: TRUEREF rec | ref}
#define U(name, rec) name: TRUEREF rec
#define TREE(rec, l, ll, d, r, lr, h) TRUEREF [rec: t . || l, ll, d, r, lr, h]

#define H(x) height x
#define L(v) length v
#define ITE(x, y, z) (x ? y : z)
#define MAX(x, y) ITE(x >= y, x, y)
#define MAXP(x, y, n) ITE(x >= y, x, y) + n
#define ISHEIGHT(e2, e3, v) ((v = MAXP(H(e2), H(e3), 1)) and v >= 0)

#define ISLEN(v, e) (v = length e and v >= 0)

#define HG0(v) (H(v) >= 0)
#define BALW(e2, v, n) (H(v) <= H(e2) + n and H(v) >= H(e2) - n)


measure height =
  | Empty -> 0
  | Node (_, _, _, _, _, h) -> h

measure length =
  | Empty -> 0
  | Node (_, cl, _, _, cr, _) -> 1 + cl + cr


val makenode:
  l: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a, 
          R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
          {e5: int | ISHEIGHT(e0, e3, e5)}) ->
  'a ->
  r: {v: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a, 
              R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
              {e5: int | ISHEIGHT(e0, e3, e5)}) | BALW(l, v, 2) } ->
  {v': TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a, 
       R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
       {e5: int | ISHEIGHT(e0, e3, e5)}) | H(v') = MAXP(H(l), H(r), 1) and L(v') = 1 + L(r) + L(l) }


val create:
  'a ->
  n: {v: int | v >= 0} ->
  {v': TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a, 
       R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
       {e5: int | ISHEIGHT(e0, e3, e5)}) | L(v') = n }



val bal:
  l: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a, 
          R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
          {e5: int | ISHEIGHT(e0, e3, e5)}) ->
  'a ->
  r: {v: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a, 
              R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
              {e5: int | ISHEIGHT(e0, e3, e5)}) | BALW(l, v, 3) } ->
  {v': TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a, 
       R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
       {e5: int | ISHEIGHT(e0, e3, e5)}) | (H(v') <= MAXP(H(l), H(r), 1) and
                                           H(v') >= MAX(H(l), H(r)) + ITE(BALW(l, r, 2), 1, 0)) and
                                           L(v') = 1 + L(l) + L(r) }

(*
val recbal:
  l: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a, 
          R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
          {e5: int | ISHEIGHT(e0, e3, e5)}) ->
  'a ->
  r: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a, 
          R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
          {e5: int | ISHEIGHT(e0, e3, e5)})  ->
  {v': TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a, 
       R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
       {e5: int | ISHEIGHT(e0, e3, e5)}) | H(v') <= MAXP(H(l), H(r), 1) and
                                           H(v') >= ITE(BALW(l, r, 2), MAXP(H(l), H(r), 1), 0) }
                                           *)


val recbal2:
  l: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a, 
          R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
          {e5: int | ISHEIGHT(e0, e3, e5)}) ->
  'a ->
  r: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a, 
          R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
          {e5: int | ISHEIGHT(e0, e3, e5)})  ->
  {v': TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a, 
       R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
       {e5: int | ISHEIGHT(e0, e3, e5)}) | (H(v') <= MAXP(H(l), H(r), 1) and
                                           H(v') >= MAX(H(l), H(r)) + ITE(BALW(l, r, 2), 1, 0-1)) and
                                           L(v') = 1 + L(l) + L(r)}
                                           
                                           

val empty:
  {v: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a,
           R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
           {e5: int | ISHEIGHT(e0, e3, e5)}) | height v = 0 and length v = 0}


val singleton:
  'a ->
  {v: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a,
           R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
           {e5: int | ISHEIGHT(e0, e3, e5)}) | height v = 1 and length v = 1}
           
val get:
  i: {v: int | v >= 0}  ->
  t: {v: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a,
           R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
           {e5: int | ISHEIGHT(e0, e3, e5)}) | height v > 0 and length v > i} ->
  'a 


val set:
  i: {v: int | v >= 0}  ->
  'a ->
  t: {v: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a,
           R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
           {e5: int | ISHEIGHT(e0, e3, e5)}) | height v > 0 and length v > i} ->
  {v: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a,
           R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
           {e5: int | ISHEIGHT(e0, e3, e5)}) | height v = height t and length v = length t}
           
           (*
val setappend:
  'a ->
  'a ->
  i: {v: int | v >= 0}  ->
  t: {v: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a,
           R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
           {e5: int | ISHEIGHT(e0, e3, e5)}) | HG0(v)} ->
  {v: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a,
           R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
           {e5: int | ISHEIGHT(e0, e3, e5)}) | length v = ITE(L(t) > i, L(t), i-1) and H(v) >= H(t)}
           *)
 

val append:
  'a ->
  t: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a,
           R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
           {e5: int | ISHEIGHT(e0, e3, e5)}) ->
  {v: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a,
           R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
           {e5: int | ISHEIGHT(e0, e3, e5)}) | (height v <= height t + 1 and height t >= height t - 1) and
                                               L(v) = L(t) + 1}
           


val leftmost:
  t: {v: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a,
           R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
           {e5: int | ISHEIGHT(e0, e3, e5)}) | height v > 0} -> 'a
  

val remove_leftmost:
  t: {v: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a,
           R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
           {e5: int | ISHEIGHT(e0, e3, e5)}) | height v > 0} ->
  {v: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a,
           R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
           {e5: int | ISHEIGHT(e0, e3, e5)}) | (H(v) <= H(t) and H(v) >= H(t) - 1) and 
                                               L(v) = L(t) - 1}
           


val merge:
  t1: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a, 
          R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
          {e5: int | ISHEIGHT(e0, e3, e5)}) ->
  t2: {v: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a, 
          R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
          {e5: int | ISHEIGHT(e0, e3, e5)}) | BALW(t1, v, 2) }  ->
  {v': TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a, 
       R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
       {e5: int | ISHEIGHT(e0, e3, e5)}) | (H(v') <= MAXP(H(t1), H(t2), 1) and H(v') >= MAX(H(t1), H(t2))) and
                                           L(v') = L(t1) + L(t2)}
       


val concat:
  t1: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a, 
          R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
          {e5: int | ISHEIGHT(e0, e3, e5)}) ->
  t2: {v: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a, 
          R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
          {e5: int | ISHEIGHT(e0, e3, e5)}) | BALW(t1, v, 2) }  ->
  {v': TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a, 
       R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
       {e5: int | ISHEIGHT(e0, e3, e5)}) | (H(v') <= MAXP(H(t1), H(t2), 1) and H(v') >= MAX(H(t1), H(t2))) and
                                            L(v') = L(t1) + L(t2)}


val pop:
  i: {v: int | v >= 0} ->
  t: {v: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a,
           R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
           {e5: int | ISHEIGHT(e0, e3, e5)}) | (H(v) > 0 and L(v) < i)} ->
  'a * {v: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a,
           R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
           {e5: int | ISHEIGHT(e0, e3, e5)}) | (H(v) >= H(t) - 1 and H(v) <= H(t)) and L(v) = L(t) - 1}
           

val remove:
  i: {v: int | v >= 0} ->
  t: {v: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a,
           R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
           {e5: int | ISHEIGHT(e0, e3, e5)}) | H(v) > 0 and L(v) < i} ->
  {v: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a,
           R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
           {e5: int | ISHEIGHT(e0, e3, e5)}) | (H(v) >= H(t) - 1 and H(v) <= H(t)) and L(v) = L(t) - 1}
           

val insert:
  i: {v: int | v >= 0} ->
  'a ->
  t: {v: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a,
           R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
           {e5: int | ISHEIGHT(e0, e3, e5)}) | true } ->
  {v: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a,
           R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
           {e5: int | ISHEIGHT(e0, e3, e5)}) | height v <= height t + 1 and height v >= height t }
 
val sub:
  int ->
  int ->
  t: {v: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a,
           R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
           {e5: int | ISHEIGHT(e0, e3, e5)}) | true } ->
  {v: TREE(z, R(e0, z, HG0(e0)), {e1: int | ISLEN(e1, e0)}, e2: 'a,
           R(e3, z, BALW(e0, e3, 2) and HG0(e3)), {e4: int | ISLEN(e4, e3)},
           {e5: int | ISHEIGHT(e0, e3, e5)}) | height v <= height t and height v >= 0 }
 
