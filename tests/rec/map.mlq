measure height =
    Empty -> 0
  | Node (_, _, _, _, h) -> h
val add:
  'a ->
  int ->
  t: [[], [v: true, v: true, v: true, v: true, v: true]] [z: t . || e0: 'a, e1: int, {e2: [[], [v: v < e0, v: true, v: true, v: true, v: true]] z | (height(e2) >= 0)}, {e3: [[], [v: v > e0, v: true, v: true, v: true, v: true]] z | (height(e3) <= height(e2) + 2 and height(e3) >= height(e2) - 2) and (height(e3) >= 0)}, {e4: int | ((e4 = (height(e2) >= height(e3) ? height(e2) : height(e3)) + 1) and e4 >= 0)}] ->
  {v': [[], [v: true, v: true, v: true, v: true, v: true]] [z: t . || e0: 'a, e1: int, {e2: [[], [v: v < e0, v: true, v: true, v: true, v: true]] z | (height(e2) >= 0)}, {e3: [[], [v: v > e0, v: true, v: true, v: true, v: true]] z | (height(e3) <= height(e2) + 2 and height(e3) >= height(e2) - 2) and (height(e3) >= 0)}, {e4: int | ((e4 = (height(e2) >= height(e3) ? height(e2) : height(e3)) + 1) and e4 >= 0)}] | height v' <= height t + 1 and height v' >= height t}
val remove_min_binding:
  t: [[], [v: true, v: true, v: true, v: true, v: true]] [z: t . || e0: 'a, e1: int, {e2: [[], [v: v < e0, v: true, v: true, v: true, v: true]] z | (height(e2) >= 0)}, {e3: [[], [v: v > e0, v: true, v: true, v: true, v: true]] z | (height(e3) <= height(e2) + 2 and height(e3) >= height(e2) - 2) and (height(e3) >= 0)}, {e4: int | ((e4 = (height(e2) >= height(e3) ? height(e2) : height(e3)) + 1) and e4 >= 0)}] ->
  'a * int * {v': [[], [v: true, v: true, v: true, v: true, v: true]] [z: t . || e0: 'a, e1: int, {e2: [[], [v: v < e0, v: true, v: true, v: true, v: true]] z | (height(e2) >= 0)}, {e3: [[], [v: v > e0, v: true, v: true, v: true, v: true]] z | (height(e3) <= height(e2) + 2 and height(e3) >= height(e2) - 2) and (height(e3) >= 0)}, {e4: int | ((e4 = (height(e2) >= height(e3) ? height(e2) : height(e3)) + 1) and e4 >= 0)}] | height v' >= height t - 1 and height v' <= height t}
val merge:
  m: 'a ->
  t1: [[], [v: v < m, v: true, v: true, v: true, v: true]] [z: t . || e0: 'a, e1: int, {e2: [[], [v: v < e0, v: true, v: true, v: true, v: true]] z | (height(e2) >= 0)}, {e3: [[], [v: v > e0, v: true, v: true, v: true, v: true]] z | (height(e3) <= height(e2) + 2 and height(e3) >= height(e2) - 2) and (height(e3) >= 0)}, {e4: int | ((e4 = (height(e2) >= height(e3) ? height(e2) : height(e3)) + 1) and e4 >= 0)}] ->
  t2: {t2: [[], [v: v > m, v: true, v: true, v: true, v: true]] [z: t . || e0: 'a, e1: int, {e2: [[], [v: v < e0, v: true, v: true, v: true, v: true]] z | (height(e2) >= 0)}, {e3: [[], [v: v > e0, v: true, v: true, v: true, v: true]] z | (height(e3) <= height(e2) + 2 and height(e3) >= height(e2) - 2) and (height(e3) >= 0)}, {e4: int | ((e4 = (height(e2) >= height(e3) ? height(e2) : height(e3)) + 1) and e4 >= 0)}] | (height(t2) <= height(t1) + 2 and height(t2) >= height(t1) - 2)} ->
  {v': [[], [v: true, v: true, v: true, v: true, v: true]] [z: t . || e0: 'a, e1: int, {e2: [[], [v: v < e0, v: true, v: true, v: true, v: true]] z | (height(e2) >= 0)}, {e3: [[], [v: v > e0, v: true, v: true, v: true, v: true]] z | (height(e3) <= height(e2) + 2 and height(e3) >= height(e2) - 2) and (height(e3) >= 0)}, {e4: int | ((e4 = (height(e2) >= height(e3) ? height(e2) : height(e3)) + 1) and e4 >= 0)}] | height(v') <= (height(t1) >= height(t2) ? height(t1) : height(t2)) + 1 and height(v') >= (height(t1) >= height(t2) ? height(t1) : height(t2))}
val remove:
  'a ->
  t: [[], [v: true, v: true, v: true, v: true, v: true]] [z: t . || e0: 'a, e1: int, {e2: [[], [v: v < e0, v: true, v: true, v: true, v: true]] z | (height(e2) >= 0)}, {e3: [[], [v: v > e0, v: true, v: true, v: true, v: true]] z | (height(e3) <= height(e2) + 2 and height(e3) >= height(e2) - 2) and (height(e3) >= 0)}, {e4: int | ((e4 = (height(e2) >= height(e3) ? height(e2) : height(e3)) + 1) and e4 >= 0)}] ->
  {v': [[], [v: true, v: true, v: true, v: true, v: true]] [z: t . || e0: 'a, e1: int, {e2: [[], [v: v < e0, v: true, v: true, v: true, v: true]] z | (height(e2) >= 0)}, {e3: [[], [v: v > e0, v: true, v: true, v: true, v: true]] z | (height(e3) <= height(e2) + 2 and height(e3) >= height(e2) - 2) and (height(e3) >= 0)}, {e4: int | ((e4 = (height(e2) >= height(e3) ? height(e2) : height(e3)) + 1) and e4 >= 0)}] | height v' >= height t - 1 and height v' <= height t}
