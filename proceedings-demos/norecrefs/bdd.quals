mdep Array
mdep Hash2
mdep Hashtbl
mdep Pervasives
mdep Sys
mdep Weak
const_ints -1, 0, 1, 3, 7, 19, 1000, 7001, 100003
(*Program Identifiers: a, b, b1, b2, c, cache_default_size, d, e, e0, e1, e2, f, g, gentag, h, i, i1, i2, j, k, k1, k2, l, m, mk_and, mk_iff, mk_imp, mk_or, n, one, r, supr, t, x, y, z, zero*)
qualif MLQ(_V) : (((x >= 0) and  (y >= 0)) -> ((_V >= 0) and  ((_V <= x) and  (_V <= y))))
qualif MLQ(_V) : (((x >= 0) and  (y >= 0)) -> (_V >= 0))
qualif MLQ(_V) : ((? (_V)) iff ((? (x)) and  (? (y))))
qualif MLQ(_V) : ((? (_V)) iff ((? (x)) or  (? (y))))
qualif MLQ(_V) : ((? (_V)) iff (-. (? (x))))
qualif MLQ(_V) : ((? (_V)) iff (x != y))
qualif MLQ(_V) : ((? (_V)) iff (x < y))
qualif MLQ(_V) : ((? (_V)) iff (x <= y))
qualif MLQ(_V) : ((? (_V)) iff (x = y))
qualif MLQ(_V) : ((? (_V)) iff (x > y))
qualif MLQ(_V) : ((? (_V)) iff (x >= y))
qualif MLQ(_V) : ((Array.length _V) = n)
qualif MLQ(_V) : ((Array.length a) = (Array.length _V))
qualif MLQ(_V) : ((var _V) <= 1000)
qualif Measure(_V) : ((var _V) = 1000)
qualif Measure(_V) : ((var _V) = v)
qualif MLQ(_V) : ((x >= 0) -> (_V >= 0))
qualif MLQ(_V) : ((y > 0) -> (_V < y))
qualif MLQ(_V) : (0 <= (var _V))
qualif MLQ(_V) : (0 <= _V)
qualif FALSE(_V) : (1 = 0)
qualif MLQ(_V) : (_V != 0)
qualif MLQ(_V) : (_V < (Array.length a))
qualif MLQ(_V) : (_V < 1000)
qualif MLQ(_V) : (_V < n)
qualif MLQ(_V) : (_V = (Array.length a))
qualif Measure(_V) : (_V = (var a))
qualif Measure(_V) : (_V = (var b))
qualif Measure(_V) : (_V = (var b1))
qualif Measure(_V) : (_V = (var b2))
qualif Measure(_V) : (_V = (var c))
qualif Measure(_V) : (_V = (var cache_default_size))
qualif Measure(_V) : (_V = (var d))
qualif Measure(_V) : (_V = (var e))
qualif Measure(_V) : (_V = (var e0))
qualif Measure(_V) : (_V = (var e1))
qualif Measure(_V) : (_V = (var e2))
qualif Measure(_V) : (_V = (var f))
qualif Measure(_V) : (_V = (var g))
qualif Measure(_V) : (_V = (var gentag))
qualif Measure(_V) : (_V = (var h))
qualif Measure(_V) : (_V = (var i))
qualif Measure(_V) : (_V = (var i1))
qualif Measure(_V) : (_V = (var i2))
qualif Measure(_V) : (_V = (var j))
qualif Measure(_V) : (_V = (var k))
qualif Measure(_V) : (_V = (var k1))
qualif Measure(_V) : (_V = (var k2))
qualif Measure(_V) : (_V = (var l))
qualif Measure(_V) : (_V = (var m))
qualif Measure(_V) : (_V = (var mk_and))
qualif Measure(_V) : (_V = (var mk_iff))
qualif Measure(_V) : (_V = (var mk_imp))
qualif Measure(_V) : (_V = (var mk_or))
qualif Measure(_V) : (_V = (var n))
qualif Measure(_V) : (_V = (var one))
qualif Measure(_V) : (_V = (var r))
qualif Measure(_V) : (_V = (var supr))
qualif Measure(_V) : (_V = (var t))
qualif Measure(_V) : (_V = (var x))
qualif Measure(_V) : (_V = (var y))
qualif Measure(_V) : (_V = (var z))
qualif Measure(_V) : (_V = (var zero))
qualif MLQ(_V) : (_V = (x * y))
qualif MLQ(_V) : (_V = (x + 1))
qualif MLQ(_V) : (_V = (x + y))
qualif MLQ(_V) : (_V = (x - (y * (x / y))))
qualif MLQ(_V) : (_V = (x - 1))
qualif MLQ(_V) : (_V = (x - y))
qualif MLQ(_V) : (_V = (x / y))
qualif MLQ(_V) : (_V > 0)
qualif MLQ(_V) : (_V >= 0)
qualif MLQ(_V) : (e1 < (var _V))
qualif VEQ(v)(A: bdd): var ~A { <=, < } var v
qualif VEQ(v)(A: int):     ~A { <=, < } var v
qualif OEQ(v)(A: bdd, B: bdd): ((var ~A <= var v) or (var ~B <= var v))
qualif Id_eq_id(_V) : _V { * * } 0
qualif Id_rel_id_int(_V)(A:int) : _V { * * } ~A
qualif Id_rel_array_id(_V)(A:int) : ~A { * * } Array.length _V
qualif Id_rel_array_idd(_V)(A:'a array) : _V { * * } Array.length ~A
qualif Int_rel_array_id(_V) : Array.length _V { * * } ^

(* qualif OEQ(v): ((var e0 <= var v) or (var e1 <= var v))
   qualif OEQ(v): ((var u1 <= var v) or (var u2 <= var v))
   qualif OEQ(v): ((var b1 <= var v) or (var b2 <= var v)) *)

