
#define PTH(v, r, i) ((v = i) or (Store.get r i < Store.get r v))
#define TRB(v, p, i) (*(Store.get p i = i -> v = i)*) true

#define UFPp(r, i, p) (i: int, {v: int | v = Store.get supr i and (((v = i) or (Store.get r i < Store.get r v)) and p)}) Store.t
#define UFP(r, i) UFPp(r, i, true)
#define UFPfind(r, i, p) UFPp(r, i, TRB(v, p, i))
#define UFR (int, {v: int | v = Store.get supr e0 and v >= 0}) Store.t

val find: r: UFR -> p: UFP(r, e0) -> i: int -> UFPfind(r, b, p) * {v: int | TRB(v, p, l) and PTH(v, r, l)}
val union: r: UFR -> p: UFP(r, e0) -> int -> int -> UFR * UFP(e0, i)

