pred INVAR = (v) ((0 <= v.length) and (v.length <= (Array.length v.bits) * 30)) and (0 <= Array.length v.bits)

lval create: {v: int | 0 < v} -> bool -> {t | INVAR}
lval normalize: {t | INVAR} -> unit
lval unsafe_get: c: {t | INVAR} -> {v: int | v < c.length and 0 <= v} -> int
lval unsafe_set: c: {t | INVAR} -> {v: int | v < c.length and 0 <= v} -> bool -> int
lval get: {t | INVAR} -> int -> bool
lval set: {t | INVAR} -> int -> bool -> unit
lval init: {v: int | 0 < v} -> (int -> bool) -> t

lval blit_bits: int ->
  i: {v: int | (v >= 0)} ->
  m: {v: int | (((0 <= v and i < v - 1) and v <= 30) and i + v < 30)} ->
  c: int array ->
  {n: int | (n + m) < (30 * (Array.length c))} ->
  unit
(*
(* pmr: what's with this alpha? =( *)
lval iter: (bool -> 'a) -> {t | INVAR} -> unit
lval map: (bool -> bool) -> {t | INVAR} -> t
lval iteri: (int -> bool -> 'a) -> {t | INVAR} -> unit
lval mapi: (int -> bool -> bool) -> {t | INVAR} -> t

lval fold_left: ('a -> bool -> 'a) -> 'a -> {t | INVAR} -> 'a
lval fold_right: (bool -> 'a -> 'a) -> {t | INVAR} -> 'a -> 'a
lval foldi_left: ('a -> int -> bool -> 'a) -> 'a -> {t | INVAR} -> 'a
lval foldi_right: (int -> bool -> 'a -> 'a) -> {t | INVAR} -> 'a -> 'a

lval bw_not: {t | INVAR} -> t
*)
