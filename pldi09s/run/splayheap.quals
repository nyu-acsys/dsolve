mdep List
mdep Myset
mdep Pervasives
const_ints 0, 1
(*Program Identifiers: a, b, empty, h, t, x, y*)
qualif MLQ(_V) : (((x >= 0) and  (y >= 0)) -> ((_V >= 0) and  ((_V <= x) and  (_V <= y))))
qualif MLQ(_V) : (((x >= 0) and  (y >= 0)) -> (_V >= 0))
qualif MLQ(_V) : ((? (_V)) iff ((? (x)) and  (? (y))))
qualif MLQ(_V) : ((? (_V)) iff ((? (x)) or  (? (y))))
qualif MLQ(_V) : ((? (_V)) iff (-. (? (x))))
qualif MLQ(_V) : ((? (_V)) iff (x != y))
qualif MLQ(_V) : ((? (_V)) iff (x < y))
qualif MLQ(_V) : ((? (_V)) iff (x <= y))
qualif MLQ(_V) : ((? (_V)) iff (x = y))
qualif MLQ(_V) : ((? (_V)) iff (x > y))
qualif MLQ(_V) : ((? (_V)) iff (x >= y))
qualif Measure(_V) : ((Myset.of_list _V) = (Myset.cup (Myset.sng x) (Myset.of_list xs)))
qualif Measure(_V) : ((Myset.of_list _V) = Myset.empty)
qualif Measure(_V) : ((set_of _V) = (Myset.cup (Myset.sng x) (Myset.cup (set_of l) (set_of r))))
qualif Measure(_V) : ((set_of _V) = Myset.empty)
qualif Measure(_V) : ((sz _V) = ((1 + (sz l)) + (sz r)))
qualif MLQ(_V) : ((sz _V) = ((sz h) + (sz t)))
qualif MLQ(_V) : ((sz _V) = ((sz t) + 1))
qualif MLQ(_V) : ((sz _V) = ((sz t) - 1))
qualif MLQ(_V) : ((sz _V) = 0)
qualif MLQ(_V) : ((sz _V) > 0)
qualif MLQ(_V) : ((x >= 0) -> (_V >= 0))
qualif MLQ(_V) : ((y > 0) -> (_V < y))
qualif MLQ(_V) : (0 <= _V)
qualif FALSE(_V) : (1 = 0)
qualif MLQ(_V) : (? ((Myset.eq (set_of _V) (Myset.cup (set_of t) (Myset.sng x)))))
qualif MLQ(_V) : (? ((Myset.eq (set_of _V) (Myset.cup (set_of t) (set_of h)))))
qualif MLQ(_V) : (? ((Myset.eq (set_of t) (Myset.cup (set_of _V) (Myset.sng e0)))))
qualif MLQ(_V) : (_V != 0)
qualif MLQ(_V) : (_V <= e0)
qualif MLQ(_V) : (_V = (Myset.cap x y))
qualif MLQ(_V) : (_V = (Myset.cup x y))
qualif MLQ(_V) : (_V = (Myset.eq x y))
qualif MLQ(_V) : (_V = (Myset.mem x y))
qualif MLQ(_V) : (_V = (Myset.mns x y))
qualif Measure(_V) : (_V = (Myset.of_list a))
qualif Measure(_V) : (_V = (Myset.of_list b))
qualif Measure(_V) : (_V = (Myset.of_list empty))
qualif Measure(_V) : (_V = (Myset.of_list h))
qualif Measure(_V) : (_V = (Myset.of_list t))
qualif Measure(_V) : (_V = (Myset.of_list x))
qualif Measure(_V) : (_V = (Myset.of_list y))
qualif MLQ(_V) : (_V = (Myset.sng x))
qualif Measure(_V) : (_V = (set_of a))
qualif Measure(_V) : (_V = (set_of b))
qualif Measure(_V) : (_V = (set_of empty))
qualif Measure(_V) : (_V = (set_of h))
qualif Measure(_V) : (_V = (set_of t))
qualif Measure(_V) : (_V = (set_of x))
qualif Measure(_V) : (_V = (set_of y))
qualif Measure(_V) : (_V = (sz a))
qualif Measure(_V) : (_V = (sz b))
qualif Measure(_V) : (_V = (sz empty))
qualif Measure(_V) : (_V = (sz h))
qualif Measure(_V) : (_V = (sz t))
qualif Measure(_V) : (_V = (sz x))
qualif Measure(_V) : (_V = (sz y))
qualif MLQ(_V) : (_V = (x * y))
qualif MLQ(_V) : (_V = (x + 1))
qualif MLQ(_V) : (_V = (x + y))
qualif MLQ(_V) : (_V = (x - (y * (x / y))))
qualif MLQ(_V) : (_V = (x - 1))
qualif MLQ(_V) : (_V = (x - y))
qualif MLQ(_V) : (_V = (x / y))
qualif MLQ(_V) : (_V = t)
qualif MLQ(_V) : (_V >= 0)
qualif MLQ(_V) : (_V >= e0)
qualif MLQ(_V) : (e0 <= _V)
qualif LEQ(v): v { * * } ~A

qualif S(v): sz v + sz e0 = sz t
qualif S(v): ? Myset.eq (Myset.cup (set_of v) (set_of e0)) (set_of t)

