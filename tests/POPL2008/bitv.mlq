predicate INVAR = (v) ((0 <= v.length) and (v.length <= (Array.length v.bits) * 30)) and (0 <= Array.length v.bits)
predicate NN = (v) (0 <= v)
predicate NZ = (v) (Array.length v >= 0)
predicate IB = (v) ((v < c.length) and (0 <= v))
predicate BB = (len) (len + ofs - 1 < 30*Array.length c and 0 <= len) and (ofs < 30*Array.length c)
val create: {int | NN} -> bool -> {t | INVAR}
val normalize: {t | INVAR} -> unit
val unsafe_get: c: {t | INVAR} -> {int | IB} -> int
val unsafe_set: c: {t | INVAR} -> {int | IB} -> bool -> int
val get: {t | INVAR} -> int -> bool
val set: {t | INVAR} -> int -> bool -> unit
val init: {v: int | 0 < v} -> (int -> bool) -> t
val blit_bits: int -> i: int -> m: {v: int | ((0 <= v) and v <= 30)} -> c: int array -> {n: int | ((0 <= n) and (((n + m) - 1 < (30 * (Array.length c))))) and (n < (30 * (Array.length c)))} -> unit
val blit_int: int -> c: int array -> {n: int | 0 <= n and (n + 30) <= (30 * (Array.length c))} -> unit
val blit: {t | INVAR} -> {t | INVAR} -> int -> int -> int -> unit
val to_string: {t | INVAR } -> string
val print: Format.formatter -> {t | INVAR} -> unit
val blit_zeros: c: {int array | NZ} -> ofs: {int | NN} -> {int | BB} -> unit
val blit_ones: c: {int array | NZ} -> ofs: {int | NN} -> {int | BB} -> unit
val fill: {t | INVAR} -> int -> int -> bool -> unit
val append: {t | INVAR} -> {t | INVAR} -> {t | INVAR}
val shiftl: {t | INVAR} -> int -> {t | INVAR}
val shiftr: {t | INVAR} -> int -> {t | INVAR}
val sub: {t | INVAR} -> int -> int -> {t | INVAR}
val concat: {t | INVAR} list -> t
val iter: (bool -> 'a) -> {t | INVAR} -> unit
val map: (bool -> bool) -> {t | INVAR} -> t
val iteri: (int -> bool -> 'a) -> {t | INVAR} -> unit
val mapi: (int -> bool -> bool) -> {t | INVAR} -> t
val fold_left: ('a -> bool -> 'a) -> 'a -> {t | INVAR} -> 'a
val fold_right: (bool -> 'a -> 'a) -> {t | INVAR} -> 'a -> 'a
val foldi_left: ('a -> int -> bool -> 'a) -> 'a -> {t | INVAR} -> 'a
val foldi_right: (int -> bool -> 'a -> 'a) -> {t | INVAR} -> 'a -> 'a
val bw_not: {t | INVAR} -> t
val all_zeros: {t | INVAR} -> bool
val all_ones: {t | INVAR} -> bool
val of_list_with_length: int list -> {int | NN} -> {t | INVAR}
val to_list: {t | INVAR} -> bool list
val of_int_us: int -> {t | INVAR}
val to_int_us: {t | INVAR} -> int
val of_int_s: int -> {t | INVAR}
val to_int_s: {t | INVAR} -> int
val gray_iter: ({t | INVAR} -> 'a) -> {int | NN} -> unit
