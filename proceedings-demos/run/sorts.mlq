 
measure set_of =
    Nil -> Myset.empty
  | Cons(xs, xss') -> Myset.cup (Myset.of_list xs) (set_of xss')

val mergesort2: xs:
  [[], [v: true, v: true]] [t: list . || e0: 'a, e1: [[], [v: true, v: true]] t] ->
  {v : [[], [v: true, v: true]] [t: list . || e0: 'a, e1: [[], [v: v >= e0, v: true]] t] | (? Myset.eq (Myset.of_list v) (Myset.of_list xs))}
  
val quick_sort: xs:
  [[], [v: true, v: true]] [t: list . || e0: 'a, e1: [[], [v: true, v: true]] t] ->
  {v : [[], [v: true, v: true]] [t: list . || e0: 'a, e1: [[], [v: v >= e0, v: true]] t] | (? Myset.eq (Myset.of_list v) (Myset.of_list xs))}
  
val merge_sort: xs:
  [[], [v: true, v: true]] [t: list . || e0: 'a, e1: [[], [v: true, v: true]] t] ->
  {v: [[], [v: true, v: true]] [t: list . || e0: 'a, e1: [[], [v: v >= e0, v: true]] t] | (? Myset.eq (Myset.of_list v) (Myset.of_list xs))}

val insert_sort: xs:
  [[], [v: true, v: true]] [t: list . || e0: 'a, e1: [[], [v: true, v: true]] t] ->
  {v: [[], [v: true, v: true]] [t: list . || e0: 'a, e1: [[], [v: v >= e0, v: true]] t] | (? Myset.eq (Myset.of_list v) (Myset.of_list xs))}

