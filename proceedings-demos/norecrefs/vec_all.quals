mdep Array
mdep Pervasives
const_ints 0, 1, 2, 3
(*Program Identifiers: a, b, c, d, e, e0, empty, f, g, h, i, j, k, l, m, n, o, p, q, r, s, supr, t, t1, t2, u, v, w, x, y*)
qualif MLQ(_V) : (((x >= 0) and  (y >= 0)) -> ((_V >= 0) and  ((_V <= x) and  (_V <= y))))
qualif MLQ(_V) : (((x >= 0) and  (y >= 0)) -> (_V >= 0))
qualif MLQ(_V) : ((? (_V)) iff (((height t) = 0) or  ((length t) = 0)))
qualif MLQ(_V) : ((? (_V)) iff ((? (x)) and  (? (y))))
qualif MLQ(_V) : ((? (_V)) iff ((? (x)) or  (? (y))))
qualif MLQ(_V) : ((? (_V)) iff (not (? (x))))
qualif MLQ(_V) : ((? (_V)) iff (x != y))
qualif MLQ(_V) : ((? (_V)) iff (x < y))
qualif MLQ(_V) : ((? (_V)) iff (x <= y))
qualif MLQ(_V) : ((? (_V)) iff (x = y))
qualif MLQ(_V) : ((? (_V)) iff (x > y))
qualif MLQ(_V) : ((? (_V)) iff (x >= y))
qualif MLQ(_V) : ((Array.length _V) = n)
qualif MLQ(_V) : ((Array.length a) = (Array.length _V))
qualif MLQ(_V) : ((height _V) <=
(if (((height t1) >= (height t2))) then ((height t1)) else ((height t2)) + 1))
qualif MLQ(_V) : ((height _V) <= ((height e0) + 2))
qualif MLQ(_V) : ((height _V) <= ((height t) + 1))
qualif MLQ(_V) : ((height _V) <= (height t))
qualif MLQ(_V) : ((height _V) = (height t))
qualif MLQ(_V) : ((height _V) = 0)
qualif MLQ(_V) : ((height _V) = 1)
qualif Measure(_V) : ((height _V) = h)
qualif MLQ(_V) : ((height _V) > 0)
qualif MLQ(_V) : ((height _V) >=
(if (((height t1) >= (height t2))) then ((height t1)) else ((height t2)) - 2))
qualif MLQ(_V) : ((height _V) >= ((height e0) - 2))
qualif MLQ(_V) : ((height _V) >= ((height t) - 1))
qualif MLQ(_V) : ((height _V) >= (height t))
qualif MLQ(_V) : ((height _V) >= 0)
qualif MLQ(_V) : ((height t) >= ((height t) - 1))
qualif MLQ(_V) : ((length _V) = (((length t1) + (length t2)) + 0))
qualif Measure(_V) : ((length _V) = ((1 + cl) + cr))
qualif MLQ(_V) : ((length _V) = ((length t) + 1))
qualif MLQ(_V) : ((length _V) = ((length t) - 1))
qualif MLQ(_V) : ((length _V) = (j - i))
qualif MLQ(_V) : ((length _V) = (length t))
qualif MLQ(_V) : ((length _V) = 0)
qualif MLQ(_V) : ((length _V) = 1)
qualif MLQ(_V) : ((length _V) = if (((length t) > i)) then ((length t)) else ((i + 1)))
qualif MLQ(_V) : ((length _V) = n)
qualif MLQ(_V) : ((length _V) > 0)
qualif MLQ(_V) : ((length _V) > i)
qualif MLQ(_V) : ((length _V) > j)
qualif MLQ(_V) : ((length _V) >= 0)
qualif MLQ(_V) : ((length _V) >= i)
qualif MLQ(_V) : ((x >= 0) -> (_V >= 0))
qualif MLQ(_V) : ((y > 0) -> (_V < y))
qualif MLQ(_V) : (0 <= _V)
qualif FALSE(_V) : (1 = 0)
qualif MLQ(_V) : (_V != 0)
qualif MLQ(_V) : (_V < (Array.length a))
qualif MLQ(_V) : (_V < (length t))
qualif MLQ(_V) : (_V < n)
qualif MLQ(_V) : (_V <= j)
qualif MLQ(_V) : (_V =
(if (((height e0) >= (height e3))) then ((height e0)) else ((height e3)) + 1))
qualif MLQ(_V) : (_V = (Array.length a))
qualif Measure(_V) : (_V = (height a))
qualif Measure(_V) : (_V = (height b))
qualif Measure(_V) : (_V = (height c))
qualif Measure(_V) : (_V = (height d))
qualif Measure(_V) : (_V = (height e))
qualif Measure(_V) : (_V = (height e0))
qualif Measure(_V) : (_V = (height empty))
qualif Measure(_V) : (_V = (height f))
qualif Measure(_V) : (_V = (height g))
qualif Measure(_V) : (_V = (height h))
qualif Measure(_V) : (_V = (height i))
qualif Measure(_V) : (_V = (height j))
qualif Measure(_V) : (_V = (height k))
qualif Measure(_V) : (_V = (height l))
qualif Measure(_V) : (_V = (height m))
qualif Measure(_V) : (_V = (height n))
qualif Measure(_V) : (_V = (height o))
qualif Measure(_V) : (_V = (height p))
qualif Measure(_V) : (_V = (height q))
qualif Measure(_V) : (_V = (height r))
qualif Measure(_V) : (_V = (height s))
qualif Measure(_V) : (_V = (height supr))
qualif Measure(_V) : (_V = (height t))
qualif Measure(_V) : (_V = (height t1))
qualif Measure(_V) : (_V = (height t2))
qualif Measure(_V) : (_V = (height u))
qualif Measure(_V) : (_V = (height v))
qualif Measure(_V) : (_V = (height w))
qualif Measure(_V) : (_V = (height x))
qualif Measure(_V) : (_V = (height y))
qualif Measure(_V) : (_V = (length a))
qualif Measure(_V) : (_V = (length b))
qualif Measure(_V) : (_V = (length c))
qualif Measure(_V) : (_V = (length d))
qualif Measure(_V) : (_V = (length e))
qualif Measure(_V) : (_V = (length e0))
qualif MLQ(_V) : (_V = (length e3))
qualif Measure(_V) : (_V = (length empty))
qualif Measure(_V) : (_V = (length f))
qualif Measure(_V) : (_V = (length g))
qualif Measure(_V) : (_V = (length h))
qualif Measure(_V) : (_V = (length i))
qualif Measure(_V) : (_V = (length j))
qualif Measure(_V) : (_V = (length k))
qualif Measure(_V) : (_V = (length l))
qualif Measure(_V) : (_V = (length m))
qualif Measure(_V) : (_V = (length n))
qualif Measure(_V) : (_V = (length o))
qualif Measure(_V) : (_V = (length p))
qualif Measure(_V) : (_V = (length q))
qualif Measure(_V) : (_V = (length r))
qualif Measure(_V) : (_V = (length s))
qualif Measure(_V) : (_V = (length supr))
qualif Measure(_V) : (_V = (length t))
qualif Measure(_V) : (_V = (length t1))
qualif Measure(_V) : (_V = (length t2))
qualif Measure(_V) : (_V = (length u))
qualif Measure(_V) : (_V = (length v))
qualif Measure(_V) : (_V = (length w))
qualif Measure(_V) : (_V = (length x))
qualif Measure(_V) : (_V = (length y))
qualif MLQ(_V) : (_V = (x * y))
qualif MLQ(_V) : (_V = (x + 1))
qualif MLQ(_V) : (_V = (x + y))
qualif MLQ(_V) : (_V = (x - (y * (x / y))))
qualif MLQ(_V) : (_V = (x - 1))
qualif MLQ(_V) : (_V = (x - y))
qualif MLQ(_V) : (_V = (x / y))
qualif MLQ(_V) : (_V >= 0)
qualif MLQ(_V) : (_V >= i)
(* for balance *)
qualif BAL(v)(A: 'a t): height v { <=, >= } height ~A {< -, + >} [1, 2, 3]
qualif BAL(v):
   height v >= (height l <= height r + 2 and height l >= height r - 2 ? (height l >= height r ? height l : height r) + 1 : 0)
qualif BAL(v):
   height v >= (height l >= height r ? height l : height r) + (height l <= height r + 2 and height l >= height r - 2 ? 1 : [0, -1])
qualif JOIN(v): height v {>=, <=} (height [l, t1] >= height [r, t2] ? height [l, t1] : height [r, t2]) {< -, + >} [0, 1]


(* for fold/iter etc *)
qualif ITERI(v) : v <= length t - length t'
qualif ITERI(v) : v + k = [i, j]
qualif MAPI(v)(A: int) : ~A <= length t - length v
qualif SETAPPEND(v) : length v = n {< +, - >} 1
qualif LSUM(v) : length v = [0, 1] + length [t1, l] + length [t2, r]

(* from the mlq *)
qualif HG0(v) : height v { >, >= } 0
qualif V(v)(A: int) : v { * * } ~A
qualif H(_v)(A: 'a t): height _v { * * } height ~A
qualif LVAR(_v)(A: int) : length _v { * * } ~A 
qualif LCONST(v) : length v { * * } [0, 1]
qualif LVARV(v)(A: 'a t) : v { * * } length ~A
qualif LVARVV(v)(A: 'a t) : length v { * * } length ~A
qualif SUB(v) : length v = j - i
qualif SETAPPEND(_v) : length _v = (length v > i ? length v : i + 1)
qualif TOARR(v) : length t = Marray.length v
qualif LPLUSONE(v) : length v { * * } length t {< -, + >} 1
qualif ISEMPTY(v) : ((? v) iff (height t = 0 or length t = 0))
qualif Ph(v): v = (height [l, e0] >= height [r, e3] ? height [l, e0] : height [r, e3]) + 1
qualif BAL(v):
   height v { >=, <= } (height l >= height r ? height l : height r) {< +, - >} [1, 2]
qualif H(_v)(A: 'a t): _v = height ~A 

