#define S(v)   (sz v)
#define SO(v)  (set_of v)
#define CUP(v, h) (Myset.cup v h)
#define SEQ(v, h) (? Myset.eq v h)
#define SNG(v) (Myset.sng v)

#define R(p)   [[], [v: p, v: true, v: true]]
#define DHP    [(b: 'a) t . || e0: 'b, e1: R(v < e0) 'b t, e2: R(v > e0) 'b t]
#define HP     [(b: 'a) t . || e0: 'b, e1: R(v <= e0) 'b t, e2: R(v >= e0) 'b t]
#define DSHP   DHP
#define SHP    HP

#define MEM(v, s)    (? Myset.mem v (set_of s))
#define DISJ(t, s)   (? Myset.eq (Myset.cap (set_of t) (set_of s)) Myset.empty)

axiom pos: forall (x: int. S(x) >= 0)

measure sz =
  | E -> 0
  | T (_, l, r) -> 1 + sz l + sz r

measure set_of =
  | E -> Myset.empty
  | T (x, l, r) -> (Myset.cup (Myset.sng x) (Myset.cup (set_of l) (set_of r)))


(*val empty     : SHP 
val isEmpty   : SHP -> bool
val insert    :  'a -> SHP -> SHP
val merge     : SHP -> SHP -> SHP 
val findMin2  : SHP -> ('a * R(e0 <= v) HP)
val deleteMin : SHP -> SHP
val deleteMin2: SHP -> ('a * R(e0 <= v) HP)
val to_list2  : SHP -> 'a list*)


val empty     : {v: SHP | S(v) = 0 && SO(v) = Myset.empty} 
val isEmpty   : t: SHP -> {v: bool | (*? v -> S(t) = 0*) true }
val insert    : x: 'a -> t: SHP -> {v: SHP | S(v) = S(t) + 1 && SEQ(SO(v), CUP(SO(t), SNG(x)))}
val merge     : h: SHP -> t: SHP -> {v: SHP | S(v) = S(h) + S(t) && SEQ(SO(v), CUP(SO(t), SO(h)))}
val findMin2  : t: {v: SHP | S(v) > 0} -> ('a * {v: SHP | v = t})
val deleteMin : t: {v: SHP | S(v) > 0} -> {v: SHP | S(v) = S(t) - 1}
val deleteMin2: t: {v: SHP | S(v) > 0} -> ('a * {v: SHP | S(v) = S(t) - 1 && SEQ(SO(t), CUP(SO(v), SNG(e0)))})
val to_list2  : SHP -> 'a list

