#define BND(v)    (0 <= v and v < 1000)
#define RHOT   [[],[],[v:true,v:true,v:true]]
#define BDD(p) RHOT [z: bdd . || || {e0:int | (BND(e0) and p)}, e1: {v: RHOT z| e0 < var v}, e2: {v: RHOT z| e0 < var v}]

measure var =
  | Zero	-> 1000 
  | One 	-> 1000 
  | Node (v,_,_)-> v
  
measure utag =
  | Zero	-> 0
  | One		-> 1
  | Node (_,_,_)-> 2

val mk	  : x: VINT -> low:BDD(v>x) -> high:BDD(v>x) -> BDD(v>=x)

val mk_not: x: BDD(true) -> BDD(v >= var x)

(*   
val gapply: operator -> x:BDD(true) -> y:BDD(true) -> BDD((v >= var x) or (v >=var y)) 
*)

