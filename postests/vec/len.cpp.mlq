#define TRUEREF [[], [v: true, v: true, v: true, v: true, v: true, v: true]]
#define R(name, ref) {name: 'a t | ref}
#define TREE(l, ll, d, r, lr, h) [(a: 'b) t . || l, ll, d, r, lr, h]
#define L(v) length v
#define ITE(x, y, z) (x ? y : z)
#define MAX(x, y) ITE(x >= y, x, y)
#define MIN(x, y) ITE(x >= y, y, x)
#define MAXP(x, y, n) ITE(x >= y, x, y) + n
#define ISLEN(v, e) (v = length e && v >= 0)
#define LSUMP(v, l, r, n) (L(v) = L(l) + L(r) + n)
#define LSUM(v, l, r) LSUMP(v, l, r, 0)
#define HGE0(v) (L(v) >= 0)
#define RGDTREE(ty, v, r) {v: TREE(R(e0, HGE0(e0)), {e1: int | ISLEN(e1, e0)}, e2: ty, \
                               R(e3, HGE0(e3)), {e4: int | ISLEN(e4, e3)}, \
                               e5: int) | (HGE0(v) && (r))}
#define UGDTREE(ty) RGDTREE(ty, v, true)

measure length =
  | Empty -> 0
  | Node (_, cl, _, _, cr, _) -> 1 + cl + cr

val create: 'a -> n: {v: int | v >= 0} -> RGDTREE('a, v, L(v) = n)

val empty: RGDTREE('a, v, L(v) = 0)

val is_empty: t: UGDTREE('a) -> {v: bool | ((? v) iff (L(t) = 0))}

val singleton: 'a -> RGDTREE('a, v, L(v) = 1)

val get: i: {v: int | v >= 0} -> t: RGDTREE('a, v, L(v) > i) -> 'a

val set: i: {v: int | v >= 0} -> 'a -> t: RGDTREE('a, v, L(v) > i) -> RGDTREE('a, v, L(v) = L(t))
          
val append: 'a -> t: UGDTREE('a) -> RGDTREE('a, v, L(v) = L(t) + 1)


val setappend: 'a -> 'a -> i: {v: int | v >= 0} -> t: RGDTREE('a, v, HGE0(v) && L(v) > 0) -> 
  RGDTREE('a, v, L(v) = ITE(L(t) > i, L(t), i+1))

val concat: t1: UGDTREE('a) -> t2: UGDTREE('a) -> RGDTREE('a, v, LSUM(v, t1, t2))
 

val pop: i: {v: int | v >= 0} -> t: RGDTREE('a, v, L(v) > i) -> ('a * RGDTREE('a, v, L(v) = L(t) - 1))


val remove: i: {v: int | v >= 0} -> t: RGDTREE('a, v, L(v) > i) -> RGDTREE('a, v, L(v) = L(t) - 1)
           

val insert: i: {v: int | v >= 0} -> 'a -> t: RGDTREE('a, v, L(v) >= i) -> RGDTREE('a, v, L(v) = L(t) + 1)
 

val sub: i: {v: int | v >= 0} -> j: {v: int | v >= i} ->
    t: RGDTREE('a, v, L(v) >= 0 && L(v) > j) -> RGDTREE('a, v, L(v) = j-i)


val iteri: t: UGDTREE('a) -> ({v: int | 0 <= v && v < L(t)} -> 'a -> 'b) -> unit


val rangeiteri: i: int -> j: int -> t: UGDTREE('a) -> ({v: int | v >= i && v <= j} -> 'a -> unit) -> unit


val revrangeiteri: i: int -> j: int -> t: UGDTREE('a) -> ({v: int | v >= i && v <= j} -> 'a -> unit) -> unit


val mapi: t: UGDTREE('a) -> ({v: int | 0 <= v && v < L(t)} -> 'a -> 'b) -> UGDTREE('b) 

val foldi: t: UGDTREE('a) -> ({v: int | 0 <= v && v < L(t)} -> 'a -> 'b -> 'b) -> 'b -> 'b  

val rangefoldi: i: int -> j: int -> t: UGDTREE('a) -> ({v: int | v >= i && v <= j} -> 'a -> 'b -> 'b) -> 'b -> 'b

val revfoldi: t: UGDTREE('a) -> ({v: int | 0 <= v && v < L(t)} -> 'a -> 'b -> 'b) -> 'b -> 'b  

val revrangefoldi: i: int -> j: int -> t: UGDTREE('a) -> ({v: int | v >= i && v <= j} -> 'a -> 'b -> 'b) -> 'b -> 'b

val to_array: t: UGDTREE('a) -> {v: 'a array | Array.length v = L(t)}

