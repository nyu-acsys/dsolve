(** Binary Decision Diagrams (BDDs) *)

(** Number of variables *)

type variable = {v:int | 1 <= v && v <= max_var }

val get_max_var : unit -> int
val set_max_var : int -> unit
val init : int -> unit

type t
type view = Zero | One | Node of variable * t (*low*) * t (*high*)
val view : t -> view

(** Accessors *)

val var : t -> variable
val low : t -> t
val high: t -> t
val zero: t
val one : t

val mk : variable -> low:t -> high:t -> t
val mk_var : variable -> t
val mk_not : t -> t
val mk_and : t -> t -> t
val mk_or : t -> t -> t
val mk_imp : t -> t -> t
val apply : (bool -> bool -> bool) -> t -> t -> t

(** formula -> bdd *)

type formula = 
  | Ffalse 
  | Ftrue 
  | Fvar of variable 
  | Fand of formula * formula
  | For  of formula * formula
  | Fimp of formula * formula
  | Fiff of formula * formula
  | Fnot of formula

val build : formula -> t

(** Satisfiability *)

val is_sat    : t -> bool 
val tautology : t -> bool 
val count_sat : t -> Int64.t
val any_sat   : t -> (variable * bool) list
val all_sat   : t -> (variable * bool) list list

(** Pretty printer *)

val print_to_dot : t -> file:string -> unit

val display : t -> unit
  (** displays the given bdd using a shell command "dot -Tps <file> | gv -" *)

(** Stats *)

val stats : unit -> int * int * int * int * int * int
  (** Return statistics on the internal nodes table.  
      The numbers are, in order:
      table length, number of entries, sum of bucket lengths,
      smallest bucket length, median bucket length, biggest bucket length. *)
