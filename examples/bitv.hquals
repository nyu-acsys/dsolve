qualif BITLENGTH(v): v.length <= (Array.length v.bits) * 30
qualif DIVBY30(x): 30 * x <= n
qualif LESSLEN(n): n < ([v, bv].length)
qualif NNLEN(v): 0 <= v.length
qualif LIMN(n)(A: int): (n + ~A) - 1 < (30 * (Array.length v))
qualif NVALID(n): n < (30 * (Array.length v))
qualif LIWN(n): (n + 30) < (30 * (Array.length v))
qualif DIV30(i): i = (n / 30)
qualif MOD30(j): j = n - (30 * (n / 30))
qualif LTV1LEN(o): o < 30 * (Array.length [v1, v2])
qualif LENV1(l): [ofs1, ofs2] + l <= 30 * (Array.length [v1, v2])
qualif VLEN(i): i = (v.length)
qualif INEQI(n): n = i * 30
qualif INVAR(i): 30 * (i - bi) = n - (ofs2 - bj)
