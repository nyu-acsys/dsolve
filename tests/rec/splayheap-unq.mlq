measure sz =
  | E -> 0
  | T (_, l, r) -> 1 + sz l + sz r
val empty : {v: [[], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v <= e0, v: true, v: true]] z, e2: [[], [v: v >= e0, v: true, v: true]] z] | (sz v) = 0}
val isEmpty : t: [[], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v <= e0, v: true, v: true]] z, e2: [[], [v: v >= e0, v: true, v: true]] z] -> {v: bool | (? v -> (sz t) = 0)}
val insert : 'a -> h: [[], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v <= e0, v: true, v: true]] z, e2: [[], [v: v >= e0, v: true, v: true]] z] -> {v: [[], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v <= e0, v: true, v: true]] z, e2: [[], [v: v >= e0, v: true, v: true]] z] | (*(sz v) = (sz t) + 1*) true}
(*val merge : [[], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v <= e0, v: true, v: true]] z, e2: [[], [v: v >= e0, v: true, v: true]] z] -> [[], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v <= e0, v: true, v: true]] z, e2: [[], [v: v >= e0, v: true, v: true]] z] -> [[], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v <= e0, v: true, v: true]] z, e2: [[], [v: v >= e0, v: true, v: true]] z]
val findMin2 : [[], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v <= e0, v: true, v: true]] z, e2: [[], [v: v >= e0, v: true, v: true]] z] -> ('a * [[], [v: e0 <= v, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v <= e0, v: true, v: true]] z, e2: [[], [v: v >= e0, v: true, v: true]] z])
val deleteMin : [[], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v <= e0, v: true, v: true]] z, e2: [[], [v: v >= e0, v: true, v: true]] z] -> [[], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v <= e0, v: true, v: true]] z, e2: [[], [v: v >= e0, v: true, v: true]] z]
val deleteMin2: [[], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v <= e0, v: true, v: true]] z, e2: [[], [v: v >= e0, v: true, v: true]] z] -> ('a * [[], [v: e0 <= v, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v <= e0, v: true, v: true]] z, e2: [[], [v: v >= e0, v: true, v: true]] z])
val to_list2 : [[], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v <= e0, v: true, v: true]] z, e2: [[], [v: v >= e0, v: true, v: true]] z] -> 'a list
*)
