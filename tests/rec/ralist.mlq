measure sz =
  | Nil -> 0
  | One _ -> 1
  | Even l,l' -> sz l + sz l'
  | Odd _,l,l' -> 1 + sz l + sz l'

refinement valid is ((_);(_);(_;sz l = sz V);(_;_;sz l = sz V)) 'a rlist = 
  | Nil 
  | One of 'a
  | Even of l:'a rlist * 'a rlist
  | Odd  of 'a * l:'a rlist * 'a rlist

val length: l: 'a rlist <valid> -> {V : int | V = sz l } 
val head:   l: {V : 'a rlist <valid> | sz V > 0} -> 'a 
val tail:   l: {V : 'a rlist <valid> | sz V > 0} -> {V:'a rlist | sz V = sz l - 1 } 
val lookup: l: 'a rlist <valid> -> {V : int | 0 <= V && V < sz l} -> 'a 


