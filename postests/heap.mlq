axiom pos : forall (x: int. sz x >= 0)
measure set_of =
    Empty -> Myaset.empty
  | Same (x, l, r) -> Myaset.cup (Myaset.sng x) (Myaset.cup (set_of l) (set_of r))
  | Diff (x, l, r) -> Myaset.cup (Myaset.sng x) (Myaset.cup (set_of l) (set_of r))
measure sz =
    Empty -> 0
  | Same (x, l, r) -> 1 + sz l + sz r
  | Diff (x, l, r) -> 1 + sz l + sz r
measure max =
  | Same (x, _, _) -> x
  | Diff (x, _, _) -> x
val empty: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t, {e2: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t | ((sz e1) = (sz e2))} || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t, {e2: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t | ((sz e1) = (sz e2) + 1)}]
val add: x: 'a -> h: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t, {e2: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t | ((sz e1) = (sz e2))} || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t, {e2: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t | ((sz e1) = (sz e2) + 1)}] -> {v: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t, {e2: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t | ((sz e1) = (sz e2))} || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t, {e2: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t | ((sz e1) = (sz e2) + 1)}] | (? Myaset.eq (set_of v) (Myaset.cup (set_of h) (Myaset.sng x))) && ((sz v) = (sz h) + 1)}
val maximum: h: {v: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t, {e2: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t | ((sz e1) = (sz e2))} || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t, {e2: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t | ((sz e1) = (sz e2) + 1)}] | (sz v) > 0} -> ('a * {v: [(e0: 'a) t . || d: 'e0, e1: [[], [v: v <= d && v <= e0, v: true, v: true], [v: v <= d && v <= e0, v: true, v: true]] 'e0 t, {e2: [[], [v: v <= d && v <= e0, v: true, v: true], [v: v <= d && v <= e0, v: true, v: true]] 'e0 t | ((sz e1) = (sz e2))} || d: 'e0, e1: [[], [v: v <= d && v <= e0, v: true, v: true], [v: v <= d && v <= e0, v: true, v: true]] 'e0 t, {e2: [[], [v: v <= d && v <= e0, v: true, v: true], [v: v <= d && v <= e0, v: true, v: true]] 'e0 t | ((sz e1) = (sz e2) + 1)}] | (((? Myaset.mem e0 (set_of v))) && v = h) && e0 = (max v)})
val extract_last: h: {v: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t, {e2: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t | ((sz e1) = (sz e2))} || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t, {e2: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t | ((sz e1) = (sz e2) + 1)}] | (sz v) > 0} -> ({v: 'a | ((sz h) = 1 -> v = (max h))} * {v: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t, {e2: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t | ((sz e1) = (sz e2))} || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t, {e2: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t | ((sz e1) = (sz e2) + 1)}] | ((? Myaset.eq (set_of h) (Myaset.cup (set_of v) (Myaset.sng e0))) && (sz v) = (sz h) - 1) && ((sz h) > 1 -> (max h) = (max v))})
val descent: x: 'a -> h: {v: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t, {e2: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t | ((sz e1) = (sz e2))} || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t, {e2: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t | ((sz e1) = (sz e2) + 1)}] | (sz v) > 0} -> ({v: 'a | (? Myaset.mem v (set_of h)) && v = (max h)} * {v: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t, {e2: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t | ((sz e1) = (sz e2))} || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t, {e2: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t | ((sz e1) = (sz e2) + 1)}] | ((? Myaset.eq (Myaset.cup (set_of h) (Myaset.sng x)) (Myaset.cup (set_of v) (Myaset.sng e0))) && (? Myaset.mem x (set_of v))) && ((sz v) = (sz h))})
val remove: h: {v: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t, {e2: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t | ((sz e1) = (sz e2))} || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t, {e2: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t | ((sz e1) = (sz e2) + 1)}] | (sz v) > 0} -> ({v: 'a | (? Myaset.mem v (set_of h)) && v = (max h)} * {v: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t, {e2: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t | ((sz e1) = (sz e2))} || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t, {e2: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t | ((sz e1) = (sz e2) + 1)}] | (sz v) = (sz h) - 1 && (? Myaset.eq (set_of h) (Myaset.cup (Myaset.sng e0) (set_of v)))})
val iter: f: ('a -> 'b) -> h: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t, {e2: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t | ((sz e1) = (sz e2))} || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t, {e2: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t | ((sz e1) = (sz e2) + 1)}] -> unit
val fold: f: ('a -> 'b -> 'b) -> h: [(b: 'a) t . || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t, {e2: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t | ((sz e1) = (sz e2))} || e0: 'b, e1: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t, {e2: [[], [v: v <= e0, v: true, v: true], [v: v <= e0, v: true, v: true]] 'b t | ((sz e1) = (sz e2) + 1)}] -> b: 'b -> 'b
