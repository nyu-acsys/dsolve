measure length =
  | Empty -> 0
  | Node (_, cl, _, _, cr, _) -> 1 + cl + cr
val create: 'a -> n: {v: int | v >= 0} -> {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (length v = n))}
val empty: {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (length v = 0))}
val is_empty: t: {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (true))} -> {v: bool | ((? v) iff (length t = 0))}
val singleton: 'a -> {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (length v = 1))}
val get: i: {v: int | v >= 0} -> t: {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (length v > i))} -> 'a
val set: i: {v: int | v >= 0} -> 'a -> t: {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (length v > i))} -> {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (length v = length t))}
val append: 'a -> t: {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (true))} -> {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (length v = length t + 1))}
val setappend: 'a -> 'a -> i: {v: int | v >= 0} -> t: {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && ((length v >= 0) && length v > 0))} ->
  {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (length v = (length t > i ? length t : i+1)))}
val concat: t1: {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (true))} -> t2: {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (true))} -> {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && ((length v = length t1 + length t2 + 0)))}
val pop: i: {v: int | v >= 0} -> t: {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (length v > i))} -> ('a * {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (length v = length t - 1))})
val remove: i: {v: int | v >= 0} -> t: {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (length v > i))} -> {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (length v = length t - 1))}
val insert: i: {v: int | v >= 0} -> 'a -> t: {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (length v >= i))} -> {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (length v = length t + 1))}
val sub: i: {v: int | v >= 0} -> j: {v: int | v >= i} ->
    t: {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (length v >= 0 && length v > j))} -> {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (length v = j-i))}
val iteri: t: {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (true))} -> ({v: int | 0 <= v && v < length t} -> 'a -> 'b) -> unit
val rangeiteri: i: int -> j: int -> t: {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (true))} -> ({v: int | v >= i && v <= j} -> 'a -> unit) -> unit
val revrangeiteri: i: int -> j: int -> t: {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (true))} -> ({v: int | v >= i && v <= j} -> 'a -> unit) -> unit
val mapi: t: {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (true))} -> ({v: int | 0 <= v && v < length t} -> 'a -> 'b) -> {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'b, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (true))}
val foldi: t: {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (true))} -> ({v: int | 0 <= v && v < length t} -> 'a -> 'b -> 'b) -> 'b -> 'b
val rangefoldi: i: int -> j: int -> t: {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (true))} -> ({v: int | v >= i && v <= j} -> 'a -> 'b -> 'b) -> 'b -> 'b
val revfoldi: t: {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (true))} -> ({v: int | 0 <= v && v < length t} -> 'a -> 'b -> 'b) -> 'b -> 'b
val revrangefoldi: i: int -> j: int -> t: {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (true))} -> ({v: int | v >= i && v <= j} -> 'a -> 'b -> 'b) -> 'b -> 'b
val to_array: t: {v: [(a: 'b) t . || {e0: 'a t | (length e0 >= 0)}, {e1: int | (e1 = length e0 && e1 >= 0)}, e2: 'a, {e3: 'a t | (length e3 >= 0)}, {e4: int | (e4 = length e3 && e4 >= 0)}, e5: int] | ((length v >= 0) && (true))} -> {v: 'a array | Array.length v = length t}
