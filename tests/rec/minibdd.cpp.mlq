
#define VINT   {v:int | 0 <= v and v < 1000} 
#define RHO(p) [[],[],[v: p, v: true, v: true]]
#define BDD(p) RHO(p) [z: t . || || e0: VINT, e1: RHO(v > e0) z, e2: RHO(v > e0) z]

measure var =
  | Zero	-> 1000 
  | One 	-> 1000 
  | Node (v,_,_)-> v
  
measure utag =
  | Zero	-> 0
  | One		-> 1
  | Node (_,_,_)-> 2

val mk	  : x: VINT -> low:BDD(v>x) -> high:BDD(v>x) -> BDD(v>=x)
(* val mk_not: x: BDD(true) -> BDD(v >= var x)
   val gapply: operator -> x:BDD(true) -> y:BDD(true) -> BDD((v >= var x) or (v >=var y))
   *)
