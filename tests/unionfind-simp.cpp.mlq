
#define RANK		(i: int, int) Store.t
#define BIND(i,v)	(v = Store.get supr i)
#define PRNT(r,i,v)	((v=i) or (Store.get r i < Store.get r v))
#define PAR(p)		(i: int, {v: int | BIND(i, v) and p}) Store.t 
#define PARR(r)		PAR(PRNT(r,i,v))
#define ROOT(p,v)	(Store.get p v = v)

val find : p: PAR(true) -> int -> {v : int | ROOT(p,v)}
val union: r: RANK -> p: PARR(r) -> int -> int -> RANK * PARR(e0)
