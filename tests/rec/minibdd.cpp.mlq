#define BND(v)  {v:int | (0 <= v and v < 1000)}
#define R       [[],[],[v:true,v:true,v:true]]
#define BDD     R [z: bdd . || || BND(e0), {e1:R z | e0 < var e1}, {e2:R z | e0 < var e2}]
#define BDDT(p) {v:BDD | p}    

measure var =
  | Zero	-> 1000 
  | One 	-> 1000 
  | Node (v,_,_)-> v
  
measure utag =
  | Zero	-> 0
  | One		-> 1
  | Node (_,_,_)-> 2

val mk	  : x: BND(v) -> BDDT(x < var v) -> BDDT(x < var v) -> BDDT(x <= var v)

val mk_not: x: BDDT(true) -> BDDT(var x <= var v)

(*   
val gapply: operator -> x:BDD(true) -> y:BDD(true) -> BDD((e0 >= var x) or (e0 >=var y)) 
*)

