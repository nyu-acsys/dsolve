qualif FALSE(v) : 1 = 0

qualif TCOMP(v) : v { * * } e0 (* BST *)
qualif COMP(v)  : ~A { * * } v (* BST *)
qualif INTLIT(v): ^ { * * } v (* BST *) 

qualif HGT0(v) : height v >= 0

qualif BAL(v)(*A: 'a t*): v { <=, >= } height ~A {< -, + >} [1, 2, 3]
qualif BAL(v)   : v { <=, >= } height e2 {< -, + >} [1, 2, 3]

qualif BAL(v)(*A: 'a t*)   : height v { <=, >= } height ~A {< -, + >} [1, 2, 3]
(* typing the qualifier seems to cull too much. this is a bug *)
qualif BAL(v)   : height v { <=, >= } height e2 {< -, + >} [1, 2, 3]

qualif H(v)(A: 'a t): height v { <=, >= } height ~A
qualif H(v)     : height v { <=, >= } height e2
qualif H(v)(A: 'a t): v = height ~A


qualif Ph(v)    : v = (height l >= height r ? height l + 1 : height r + 1)
qualif Ph(v)    : v = (height e2 >= height e3 ? height e2 + 1 : height e3 + 1)
qualif Phh(v)   : height v = (height [l, ll, lrl] >= height [r, lr, lrr] ? height [l, ll, lrl] + 1 : height [r, lr, lrr] + 1)
qualif Phh(v)   : height v <= (height [l, ll, lrl] >= height [r, lr, lrr] ? height [l, ll, lrl] + 1 : height [r, lr, lrr] + 1) 
qualif Phh(v)   : height v >= (height [l, ll, lrl] >= height [r, lr, lrr] ? height [l, ll, lrl] : height [r, lr, lrr])
qualif PhhHH(v)   : (height v >= height t1) and (height v >= height t2)
qualif PhhHH(v)   : height v <= (height t1 >= height t2 ? height t1 + 1 : height t2 + 1)
qualif BALINVAR(v)   :  
(height v <= (height l <= height r + 2 and height l >= height r - 2 ? 
   (height l >= height r ? height l + 1 : height r + 1) :
   (height l >= height r ? height l : height r) + 1))
qualif BALINVAR(v)   :
(height v >= (height l <= height r + 2 and height l >= height r - 2 ?
   (height l >= height r ? height l + 1 : height r + 1) :
   (height l >= height r ? height l : height r)))

   (* this can be shortened to just hv <= max(l, r)+1 an hv >= max(l,r)+(balanced(l, r) ? 1, 0) *)
   
