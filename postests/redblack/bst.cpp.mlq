#define R [[], [v: true, v: true, v: true], [v: true, v: true, v: true], [v: true, v: true, v: true]]

#define LR(e0) [v: v < e0, v: true, v: true]
#define LN(e0) [[], LR(e0), LR(e0), LR(e0)]
#define RR(e0) [v: v > e0, v: true, v: true]
#define RN(e0) [[], RR(e0), RR(e0), RR(e0)]

#define DN e0: 'a, e1: LN(e0) z, e2: RN(e0) z
#define N  e0: 'a, e1: LN(e0) z, e2: RN(e0) z
#define PN e0: 'a, e1: LN(e0) z, e2: RN(e0) z

#define RBT R [z: dict . || N || DN || PN]
#define GBT R [z: dict . || N || DN || PN]

(*

val restore_right: e: 'a -> l: GBT -> r: {v: RBT | height v = height l} -> GBT
val restore_left: e: 'a -> l: RBT -> r: {v: RBT | NOP(v) and height v = height l} -> GBT
val ins1: key: 'a -> d: GBT -> RBT

*)

val insert: dict: GBT -> key: 'a -> GBT

(* BST interfaces

#define BN e0: 'a, e1: LN(e0) z, e2: RN(e0) z

#define BST [z: dict . || BN || BN || BN || BN]

val restore_right:
  e: 'a ->
  lt: [[], LR(e), LR(e), LR(e), LR(e)] BST ->
  r: [[], RR(e), RR(e), RR(e), RR(e)] BST ->
  R BST

val restore_left:
  e: 'a ->
  l: [[], LR(e), LR(e), LR(e), LR(e)] BST ->
  rt: [[], RR(e), RR(e), RR(e), RR(e)] BST ->
  R BST

val insert: dict: R BST -> key: 'a -> R BST

*)
