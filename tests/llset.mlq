measure of_list2 =
  | Nil2                -> Myset.empty
  | Cons2 (xs,xss')     -> Myset.cup (Myset.of_list xs) (of_list2 xss')

(* 
measure of_list2 =
  | [] 		-> Myset.empty
  | xs :: xss' 	-> Myset.cup (Myset.of_list xs) (of_list2 xss')
val flatten: x: 'a list list -> {v: 'a list | ? Myset.eq (Myset.of_list v) (of_list2 x)} 
*)

val flatten: x: 'a list2 -> {v: 'a list | ? Myset.eq (Myset.of_list v) (of_list2 x)}
val reverse:        xs: 'a list -> {v: 'a list | ? Myset.eq (Myset.of_list v) (Myset.of_list xs)}
val reverse2:       xs: 'a list -> {v: 'a list | ? Myset.eq (Myset.of_list v) (Myset.of_list xs)}
(* 
val reverse3:       xs: 'a list -> {v: 'a list | ? Myset.eq (Myset.of_list v) (Myset.of_list xs)}
*)
val compact: xs: 'a list -> {v: 'a list | ? Myset.eq (Myset.of_list v) (Myset.of_list xs)}
val sorted_compact: xs: 'a list -> {v: 'a list | ? Myset.eq (Myset.of_list v) (Myset.of_list xs)}
val mem: x: 'a -> ys: 'a list -> {v: bool | v = Myset.mem x (Myset.of_list ys)}
val delete: x: 'a -> ys: 'a list -> {v: 'a list | ? Myset.eq (Myset.of_list v) (Myset.mns (Myset.of_list ys) (Myset.sng x))}
val diff: xs: 'a list -> ys: 'a list -> {v: 'a list | ? Myset.eq (Myset.of_list v) (Myset.mns (Myset.of_list xs) (Myset.of_list ys))}
val gt: x: 'a -> ys: 'a list -> {v : 'a list | -. (? Myset.mem x (Myset.of_list v))}

