axiom pos: forall (x: int. (sz x) >= 0)
measure sz =
  | E -> 0
  | T (_, l, r) -> 1 + sz l + sz r
measure set_of =
  | E -> Myset.empty
  | T (x, l, r) -> (Myset.cup (Myset.sng x) (Myset.cup (set_of l) (set_of r)))
val empty : {v: [[], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v < e0, v: true, v: true]] z, e2: [[], [v: v > e0, v: true, v: true]] z] | (sz v) = 0}
val isEmpty : t: [[], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v < e0, v: true, v: true]] z, e2: [[], [v: v > e0, v: true, v: true]] z] -> {v: bool | (? v -> (sz t) = 0)}
val insert : x: 'a -> t: [[], [v: v != x, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v < e0, v: true, v: true]] z, e2: [[], [v: v > e0, v: true, v: true]] z] -> {v: [[], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v < e0, v: true, v: true]] z, e2: [[], [v: v > e0, v: true, v: true]] z] | (sz v) = (sz t) + 1}
val merge : h: [[], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v < e0, v: true, v: true]] z, e2: [[], [v: v > e0, v: true, v: true]] z] -> t: {v: [[], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v < e0, v: true, v: true]] z, e2: [[], [v: v > e0, v: true, v: true]] z] | (? Myset.eq (Myset.cap (set_of v) (set_of h)) Myset.empty)} -> {v: [[], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v < e0, v: true, v: true]] z, e2: [[], [v: v > e0, v: true, v: true]] z] | (sz v) = (sz h) + (sz t) and (? Myset.eq (set_of v) (Myset.cup (set_of t) (set_of h)))}
val findMin2 : t: {v: [[], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v < e0, v: true, v: true]] z, e2: [[], [v: v > e0, v: true, v: true]] z] | (sz v) > 0} -> ('a * {v: [[], [v: e0 <= v, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v < e0, v: true, v: true]] z, e2: [[], [v: v > e0, v: true, v: true]] z] | v = t})
val deleteMin : t: {v: [[], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v < e0, v: true, v: true]] z, e2: [[], [v: v > e0, v: true, v: true]] z] | (sz v) > 0} -> {v: [[], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v < e0, v: true, v: true]] z, e2: [[], [v: v > e0, v: true, v: true]] z] | (sz v) = (sz t) - 1}
val deleteMin2: t: {v: [[], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v < e0, v: true, v: true]] z, e2: [[], [v: v > e0, v: true, v: true]] z] | (sz v) > 0} -> ('a * {v: [[], [v: e0 < v, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v < e0, v: true, v: true]] z, e2: [[], [v: v > e0, v: true, v: true]] z] | (sz v) = (sz t) - 1})
val to_list2 : [[], [v: true, v: true, v: true]] [z: t . || e0: 'a, e1: [[], [v: v < e0, v: true, v: true]] z, e2: [[], [v: v > e0, v: true, v: true]] z] -> 'a list
