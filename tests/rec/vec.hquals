



qualif M(v) : v = height ~A
qualif M(v) : v = length ~A
qualif RINVAR(v) : v >= e1 - 1
qualif RINVAR(v) : v <= e1
qualif RINVAR(v) : length v >= length l - 1
qualif G0(v) : v { >, >= } 0
qualif HG0(v) : height v { >, >= } 0

qualif LVAR(v) : length v { * * } ~A 
qualif LVARV(v) : v { * * } length ~A
qualif LVARVV(v) : length v { * * } length ~A
qualif LCONST(v) : length v { * * } [0, 1]
qualif LPLUSONE(v) : length v { * * } length t {< -, + >} 1
qualif LLL(v) : length v = (length t > i ? length t : i - 1)
qualif FAKEHEIGHT(v) : height v >= height t

qualif LSUM(v) : length v = [0, 1] + length [t1, l] + length [t2, r]

qualif Ph(v): v = (height e0 >= height e3 ? height e0 : height e3) + 1
qualif Ph(v): v = (height l >= height r ? height l : height r) + 1

qualif E1(v): v = length e0
qualif E4(v): v = length e3

qualif BAL(v)(*A: 'a t*): v { <=, >= } height ~A {< -, + >} [1, 2, 3, 4]
qualif BAL(v)   : v { <=, >= } height e0 {< -, + >} [1, 2, 3, 4]

qualif BAL(v)(*A: 'a t*)   : height v { <=, >= } height ~A {< -, + >} [1, 2, 3, 4]
(* typing the qualifier seems to cull too much. this is a bug *)
qualif BAL(v)   : height v { <=, >= } height e0 {< -, + >} [1, 2, 3, 4]

qualif H(v)(A: 'a t): height v { * * } height ~A
qualif H(v)     : height v { * * } height e0

qualif BALINVAR(v):
   height v <= (height l >= height r ? height l : height r) + 1
qualif BALINVAR(v):
   height v >= (height l <= height r + 2 and height l >= height r - 2 ? (height l >= height r ? height l : height r) + 1 : 0)
qualif BALINVAR(v):
   height v >= (height l >= height r ? height l : height r) + (height l <= height r + 2 and height l >= height r - 2 ? 1 : 0)
qualif BALINVAR(v):
   height v >= (height l >= height r ? height l : height r) + (height l <= height r + 2 and height l >= height r - 2 ? 1 : 0-1)

qualif Phh(v)   : height v {=, <=} (height [l, ll, lrl, rll] >= height [r, lr, lrr, rlr] ? height [l, ll, lrl, rll] : height [r, lr, lrr, rlr]) + 1 
qualif Phh(v)   : height v {=, >=} (height [l, ll, lrl, rll] >= height [r, lr, lrr, rlr] ? height [l, ll, lrl, rll] : height [r, lr, lrr, rlr])
qualif PhhHH(v)   : height v {>=, <=} (height t1 >= height t2 ? height t1 : height t2)
qualif PhhHH(v)   : height v {>=, <=} (height t1 >= height t2 ? height t1 {< -, + >} 1 : height t2 {< -, + >} 1)

qualif FALSE(v) : 1 = 0
 
(* qualif FALSE(v) : 1 = 0
qualif HH(v)    : v = ~A
(*qualif TCOMP(v) : e0 { * * } v*) (* BST *)
(*qualif COMP(v)  : ~A { * * } v*) (* BST *)
(*qualif INTLIT(v): ^ { * * } v*) (* BST *) 
qualif H(v)(A: 'a t): v = height ~A

qualif PhhHH(v)   : height v >= (height t1 >= height t2 ? height t1 : height t2)
qualif PhhHH(v)   : height v <= (height t1 >= height t2 ? height t1 + 1 : height t2 + 1)
  *)
