mdep Myaset
mdep Myaset
mdep Pervasives
const_ints 0, 1, 2
(*Program Identifiers: a, b, e0, supr, t, x, y*)
qualif MLQ(_V) : (((x >= 0) and  (y >= 0)) -> ((_V >= 0) and  ((_V <= x) and  (_V <= y))))
qualif MLQ(_V) : (((x >= 0) and  (y >= 0)) -> (_V >= 0))
qualif MLQ(_V) : ((? (_V)) iff ((? (x)) and  (? (y))))
qualif MLQ(_V) : ((? (_V)) iff ((? (x)) or  (? (y))))
qualif MLQ(_V) : ((? (_V)) iff (-. (? (x))))
qualif MLQ(_V) : ((? (_V)) iff (x != y))
qualif MLQ(_V) : ((? (_V)) iff (x < y))
qualif MLQ(_V) : ((? (_V)) iff (x <= y))
qualif MLQ(_V) : ((? (_V)) iff (x = y))
qualif MLQ(_V) : ((? (_V)) iff (x > y))
qualif MLQ(_V) : ((? (_V)) iff (x >= y))
qualif Measure(_V) : ((Myaset.of_list _V) = (Myaset.cup (Myaset.sng x) (Myaset.of_list xs)))
qualif Measure(_V) : ((Myaset.of_list _V) = Myaset.empty)
qualif MLQ(_V) : ((height _V) <= ((height e2) + 2))
qualif MLQ(_V) : ((height _V) <= ((height t) + 1))
qualif MLQ(_V) : ((height _V) <= (height t))
qualif Measure(_V) : ((height _V) = 0)
qualif Measure(_V) : ((height _V) = h)
qualif MLQ(_V) : ((height _V) >= ((height e2) - 2))
qualif MLQ(_V) : ((height _V) >= ((height t) - 1))
qualif MLQ(_V) : ((height _V) >= (height t))
qualif MLQ(_V) : ((height _V) >= 0)
qualif Measure(_V) : ((set_of _V) =
(Myaset.cup (Myaset.sng d) (Myaset.cup (set_of l) (set_of r))))
qualif Measure(_V) : ((set_of _V) = Myaset.empty)
qualif MLQ(_V) : ((x >= 0) -> (_V >= 0))
qualif MLQ(_V) : ((y > 0) -> (_V < y))
qualif MLQ(_V) : (0 <= _V)
qualif FALSE(_V) : (1 = 0)
qualif MLQ(_V) : (? ((Myaset.eq (set_of _V) (Myaset.cup (set_of t) (Myaset.sng x)))))
qualif MLQ(_V) : (? ((Myaset.eq (set_of _V) (Myaset.mns (set_of t) (Myaset.sng x)))))
qualif MLQ(_V) : (? ((Myaset.mem _V (set_of t))))
qualif MLQ(_V) : (_V != 0)
qualif MLQ(_V) : (_V != Myaset.empty)
qualif MLQ(_V) : (_V < e0)
qualif MLQ(_V) : (_V =
(if (((height e2) >= (height e3))) then ((height e2)) else ((height e3)) + 1))
qualif MLQ(_V) : (_V = (Myaset.cap x y))
qualif MLQ(_V) : (_V = (Myaset.cup x y))
qualif MLQ(_V) : (_V = (Myaset.eq x y))
qualif MLQ(_V) : (_V = (Myaset.mem x y))
qualif MLQ(_V) : (_V = (Myaset.mns x y))
qualif Measure(_V) : (_V = (Myaset.of_list a))
qualif Measure(_V) : (_V = (Myaset.of_list b))
qualif Measure(_V) : (_V = (Myaset.of_list e0))
qualif Measure(_V) : (_V = (Myaset.of_list supr))
qualif Measure(_V) : (_V = (Myaset.of_list t))
qualif Measure(_V) : (_V = (Myaset.of_list x))
qualif Measure(_V) : (_V = (Myaset.of_list y))
qualif MLQ(_V) : (_V = (Myaset.sng x))
qualif MLQ(_V) : (_V = (Myaset.xtr x))
qualif Measure(_V) : (_V = (height a))
qualif Measure(_V) : (_V = (height b))
qualif Measure(_V) : (_V = (height e0))
qualif Measure(_V) : (_V = (height supr))
qualif Measure(_V) : (_V = (height t))
qualif Measure(_V) : (_V = (height x))
qualif Measure(_V) : (_V = (height y))
qualif Measure(_V) : (_V = (set_of a))
qualif Measure(_V) : (_V = (set_of b))
qualif Measure(_V) : (_V = (set_of e0))
qualif Measure(_V) : (_V = (set_of supr))
qualif Measure(_V) : (_V = (set_of t))
qualif Measure(_V) : (_V = (set_of x))
qualif Measure(_V) : (_V = (set_of y))
qualif MLQ(_V) : (_V = (x * y))
qualif MLQ(_V) : (_V = (x + 1))
qualif MLQ(_V) : (_V = (x + y))
qualif MLQ(_V) : (_V = (x - (y * (x / y))))
qualif MLQ(_V) : (_V = (x - 1))
qualif MLQ(_V) : (_V = (x - y))
qualif MLQ(_V) : (_V = (x / y))
qualif MLQ(_V) : (_V = x)
qualif MLQ(_V) : (_V > e0)
qualif MLQ(_V) : (_V >= 0)

(*qualif FALSE(v) : (1 = 0)*)
qualif BAL(v)   : (height v >= (height l <= height r + 2 and height l >= height r - 2 ? 
(height l >= height r ? height l + 1 : height r + 1) : (height l >= height r ? height l : height r)))
qualif H(v)     : height v { <=, >= } (height [l, t1] { <=, >= } height [r, t2] ? height [l, t1] : height [r, t2]) + [0, 1]

(* questionable *)
qualif BAL(v)(A: 'a t)   : height v { <=, >= } height ~A {< -, + >} [0, 1, 2, 3]

(* qualifiers from the mlq file *)
qualif HGE0(v)  : height v { >=, > } 0
qualif H(v)     : v = (height [l, e2] >= height [r, e3] ? height [l, e2] : height [r, e3]) + 1
qualif COMP(v)  : ~A { * * } v 
qualif COMP(v)(A: 'a t)  : ~A { =, != } v 
qualif H(v)(A: 'a t)     : v = height ~A

qualif S(v)  : (true or (? Myaset.un v)) and (-. (? (Myaset.mem x (set_of t))))
qualif S(v)  : (? Myaset.eq (set_of v) (Myaset.cup (Myaset.sng x) (Myaset.cup (set_of l) (set_of r))))
qualif S(v)  : (? Myaset.eq (set_of v) (Myaset.cup (set_of t2) (set_of t1)))
qualif S(v)  : (? Myaset.eq (set_of [t2, l, t]) (Myaset.cup (set_of v) (Myaset.sng e0)))

