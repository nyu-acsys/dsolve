mdep Myaset
mdep Pervasives
const_ints 0, 1
(*Program Identifiers: a, b, c, e0, empty, f, h, supr, x, y*)
qualif MLQ(_V) : (((sz h) = 1) -> (_V = (max h)))
qualif MLQ(_V) : (((sz h) > 1) -> ((max h) = (max _V)))
qualif MLQ(_V) : (((x >= 0) and  (y >= 0)) -> ((_V >= 0) and  ((_V <= x) and  (_V <= y))))
qualif MLQ(_V) : (((x >= 0) and  (y >= 0)) -> (_V >= 0))
qualif MLQ(_V) : ((? (_V)) iff ((? (x)) and  (? (y))))
qualif MLQ(_V) : ((? (_V)) iff ((? (x)) or  (? (y))))
qualif MLQ(_V) : ((? (_V)) iff (-. (? (x))))
qualif MLQ(_V) : ((? (_V)) iff (x != y))
qualif MLQ(_V) : ((? (_V)) iff (x < y))
qualif MLQ(_V) : ((? (_V)) iff (x <= y))
qualif MLQ(_V) : ((? (_V)) iff (x = y))
qualif MLQ(_V) : ((? (_V)) iff (x > y))
qualif MLQ(_V) : ((? (_V)) iff (x >= y))
qualif Measure(_V) : ((Myaset.of_list _V) = (Myaset.cup (Myaset.sng x) (Myaset.of_list xs)))
qualif Measure(_V) : ((Myaset.of_list _V) = Myaset.empty)
qualif Measure(_V) : ((max _V) = x)
qualif Measure(_V) : ((set_of _V) =
(Myaset.cup (Myaset.sng x) (Myaset.cup (set_of l) (set_of r))))
qualif Measure(_V) : ((set_of _V) = Myaset.empty)
qualif Measure(_V) : ((sz _V) = ((1 + (sz l)) + (sz r)))
qualif MLQ(_V) : ((sz _V) = ((sz h) + 1))
qualif MLQ(_V) : ((sz _V) = ((sz h) - 1))
qualif MLQ(_V) : ((sz _V) = (sz h))
qualif Measure(_V) : ((sz _V) = 0)
qualif MLQ(_V) : ((sz _V) > 0)
qualif MLQ(_V) : ((sz e1) = ((sz _V) + 1))
qualif MLQ(_V) : ((sz e1) = (sz _V))
qualif MLQ(_V) : ((x >= 0) -> (_V >= 0))
qualif MLQ(_V) : ((y > 0) -> (_V < y))
qualif MLQ(_V) : (0 <= _V)
qualif FALSE(_V) : (1 = 0)
qualif MLQ(_V) : (? ((Myaset.eq (Myaset.cup (set_of h) (Myaset.sng x)) (Myaset.cup (set_of _V) 
                                                      (Myaset.sng e0)))))
qualif MLQ(_V) : (? ((Myaset.eq (set_of _V) (Myaset.cup (set_of h) (Myaset.sng x)))))
qualif MLQ(_V) : (? ((Myaset.eq (set_of h) (Myaset.cup (Myaset.sng e0) (set_of _V)))))
qualif MLQ(_V) : (? ((Myaset.eq (set_of h) (Myaset.cup (set_of _V) (Myaset.sng e0)))))
qualif MLQ(_V) : (? ((Myaset.mem _V (set_of h))))
qualif MLQ(_V) : (? ((Myaset.mem e0 (set_of _V))))
qualif MLQ(_V) : (? ((Myaset.mem x (set_of _V))))
qualif MLQ(_V) : (_V != 0)
qualif MLQ(_V) : (_V != Myaset.empty)
qualif MLQ(_V) : (_V <= d)
qualif MLQ(_V) : (_V <= e0)
qualif MLQ(_V) : (_V = (Myaset.cap x y))
qualif MLQ(_V) : (_V = (Myaset.cup x y))
qualif MLQ(_V) : (_V = (Myaset.eq x y))
qualif MLQ(_V) : (_V = (Myaset.mem x y))
qualif MLQ(_V) : (_V = (Myaset.mns x y))
qualif Measure(_V) : (_V = (Myaset.of_list a))
qualif Measure(_V) : (_V = (Myaset.of_list b))
qualif Measure(_V) : (_V = (Myaset.of_list c))
qualif Measure(_V) : (_V = (Myaset.of_list e0))
qualif Measure(_V) : (_V = (Myaset.of_list empty))
qualif Measure(_V) : (_V = (Myaset.of_list f))
qualif Measure(_V) : (_V = (Myaset.of_list h))
qualif Measure(_V) : (_V = (Myaset.of_list supr))
qualif Measure(_V) : (_V = (Myaset.of_list x))
qualif Measure(_V) : (_V = (Myaset.of_list y))
qualif MLQ(_V) : (_V = (Myaset.sng x))
qualif MLQ(_V) : (_V = (Myaset.xtr x))
qualif Measure(_V) : (_V = (max a))
qualif Measure(_V) : (_V = (max b))
qualif Measure(_V) : (_V = (max c))
qualif Measure(_V) : (_V = (max e0))
qualif Measure(_V) : (_V = (max empty))
qualif Measure(_V) : (_V = (max f))
qualif Measure(_V) : (_V = (max h))
qualif Measure(_V) : (_V = (max supr))
qualif Measure(_V) : (_V = (max x))
qualif Measure(_V) : (_V = (max y))
qualif Measure(_V) : (_V = (set_of a))
qualif Measure(_V) : (_V = (set_of b))
qualif Measure(_V) : (_V = (set_of c))
qualif Measure(_V) : (_V = (set_of e0))
qualif Measure(_V) : (_V = (set_of empty))
qualif Measure(_V) : (_V = (set_of f))
qualif Measure(_V) : (_V = (set_of h))
qualif Measure(_V) : (_V = (set_of supr))
qualif Measure(_V) : (_V = (set_of x))
qualif Measure(_V) : (_V = (set_of y))
qualif Measure(_V) : (_V = (sz a))
qualif Measure(_V) : (_V = (sz b))
qualif Measure(_V) : (_V = (sz c))
qualif Measure(_V) : (_V = (sz e0))
qualif Measure(_V) : (_V = (sz empty))
qualif Measure(_V) : (_V = (sz f))
qualif Measure(_V) : (_V = (sz h))
qualif Measure(_V) : (_V = (sz supr))
qualif Measure(_V) : (_V = (sz x))
qualif Measure(_V) : (_V = (sz y))
qualif MLQ(_V) : (_V = (x * y))
qualif MLQ(_V) : (_V = (x + 1))
qualif MLQ(_V) : (_V = (x + y))
qualif MLQ(_V) : (_V = (x - (y * (x / y))))
qualif MLQ(_V) : (_V = (x - 1))
qualif MLQ(_V) : (_V = (x - y))
qualif MLQ(_V) : (_V = (x / y))
qualif MLQ(_V) : (_V = h)
qualif MLQ(_V) : (_V >= 0)
qualif MLQ(_V) : (e0 = (max _V))
qualif CMP(v)(A: int): v { * * } ~A

(*qualif S(v) : set_of v = Myaset.empty*)
qualif S(v) : sz v > 1
(*qualif S(v)     : (-. ? (Myaset.mem x (set_of h)))*)

